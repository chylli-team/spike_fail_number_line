.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::IteratorFactory 3"
.TH TAP::Parser::IteratorFactory 3 2023-10-02 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
TAP::Parser::IteratorFactory \- Figures out which SourceHandler objects to use for a given Source
.SH VERSION
.IX Header "VERSION"
Version 3.48
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use TAP::Parser::IteratorFactory;
\&  my $factory = TAP::Parser::IteratorFactory\->new({ %config });
\&  my $iterator  = $factory\->make_iterator( $filename );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a factory class that takes a TAP::Parser::Source and runs it through all the
registered TAP::Parser::SourceHandlers to see which one should handle the source.
.PP
If you're a plugin author, you'll be interested in how to "register_handler"s,
how "detect_source" works.
.SH METHODS
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fR\f(CI\*(C`new\*(C'\fR\fI\fR
.IX Subsection "new"
.PP
Creates a new factory class:
.PP
.Vb 1
\&  my $sf = TAP::Parser::IteratorFactory\->new( $config );
.Ve
.PP
\&\f(CW$config\fR is optional.  If given, sets "config" and calls "load_handlers".
.PP
\fR\f(CI\*(C`register_handler\*(C'\fR\fI\fR
.IX Subsection "register_handler"
.PP
Registers a new TAP::Parser::SourceHandler with this factory.
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->register_handler( $handler_class );
.Ve
.PP
\fR\f(CI\*(C`handlers\*(C'\fR\fI\fR
.IX Subsection "handlers"
.PP
List of handlers that have been registered.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fR\f(CI\*(C`config\*(C'\fR\fI\fR
.IX Subsection "config"
.PP
.Vb 2
\& my $cfg = $sf\->config;
\& $sf\->config({ Perl => { %config } });
.Ve
.PP
Chaining getter/setter for the configuration of the available source handlers.
This is a hashref keyed on handler class whose values contain config to be passed
onto the handlers during detection & creation.  Class names may be fully qualified
or abbreviated, eg:
.PP
.Vb 3
\&  # these are equivalent
\&  $sf\->config({ \*(AqTAP::Parser::SourceHandler::Perl\*(Aq => { %config } });
\&  $sf\->config({ \*(AqPerl\*(Aq => { %config } });
.Ve
.PP
\fR\f(CI\*(C`load_handlers\*(C'\fR\fI\fR
.IX Subsection "load_handlers"
.PP
.Vb 1
\& $sf\->load_handlers;
.Ve
.PP
Loads the handler classes defined in "config".  For example, given a config:
.PP
.Vb 3
\&  $sf\->config({
\&    MySourceHandler => { some => \*(Aqconfig\*(Aq },
\&  });
.Ve
.PP
\&\f(CW\*(C`load_handlers\*(C'\fR will attempt to load the \f(CW\*(C`MySourceHandler\*(C'\fR class by looking in
\&\f(CW@INC\fR for it in this order:
.PP
.Vb 2
\&  TAP::Parser::SourceHandler::MySourceHandler
\&  MySourceHandler
.Ve
.PP
\&\f(CW\*(C`croak\*(C'\fRs on error.
.PP
\fR\f(CI\*(C`make_iterator\*(C'\fR\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $src_factory\->make_iterator( $source );
.Ve
.PP
Given a TAP::Parser::Source, finds the most suitable TAP::Parser::SourceHandler
to use to create a TAP::Parser::Iterator (see "detect_source").  Dies on error.
.PP
\fR\f(CI\*(C`detect_source\*(C'\fR\fI\fR
.IX Subsection "detect_source"
.PP
Given a TAP::Parser::Source, detects what kind of source it is and
returns \fIone\fR TAP::Parser::SourceHandler (the most confident one).  Dies
on error.
.PP
The detection algorithm works something like this:
.PP
.Vb 5
\&  for (@registered_handlers) {
\&    # ask them how confident they are about handling this source
\&    $confidence{$handler} = $handler\->can_handle( $source )
\&  }
\&  # choose the most confident handler
.Ve
.PP
Ties are handled by choosing the first handler.
.SH SUBCLASSING
.IX Header "SUBCLASSING"
Please see "SUBCLASSING" in TAP::Parser for a subclassing overview.
.SS Example
.IX Subsection "Example"
If we've done things right, you'll probably want to write a new source,
rather than sub-classing this (see TAP::Parser::SourceHandler for that).
.PP
But in case you find the need to...
.PP
.Vb 1
\&  package MyIteratorFactory;
\&
\&  use strict;
\&
\&  use base \*(AqTAP::Parser::IteratorFactory\*(Aq;
\&
\&  # override source detection algorithm
\&  sub detect_source {
\&    my ($self, $raw_source_ref, $meta) = @_;
\&    # do detective work, using $meta and whatever else...
\&  }
\&
\&  1;
.Ve
.SH AUTHORS
.IX Header "AUTHORS"
Steve Purkis
.SH ATTRIBUTION
.IX Header "ATTRIBUTION"
Originally ripped off from Test::Harness.
.PP
Moved out of TAP::Parser & converted to a factory class to support
extensible TAP source detective work by Steve Purkis.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Perl,
TAP::Parser::SourceHandler::RawTAP,
TAP::Parser::SourceHandler::Handle,
TAP::Parser::SourceHandler::Executable
