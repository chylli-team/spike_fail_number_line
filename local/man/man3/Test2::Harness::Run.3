.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Run 3"
.TH Test2::Harness::Run 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Run \- Representation of a set of tests to run, and their
options.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
These are set at construction time and cannot be modified.
.PP
See App::Yath::Options::Run for more documentation on these.
.SS "FROM OPTIONS"
.IX Subsection "FROM OPTIONS"
.ie n .IP "$bool = $run\->author_testing" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->author_testing" 4
.IX Item "$bool = $run->author_testing"
.PD 0
.ie n .IP "$hashref = $run\->env_vars" 4
.el .IP "\f(CW$hashref\fR = \f(CW$run\fR\->env_vars" 4
.IX Item "$hashref = $run->env_vars"
.ie n .IP "$bool = $run\->event_uuids" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->event_uuids" 4
.IX Item "$bool = $run->event_uuids"
.ie n .IP "$arrayref = $run\->fields" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$run\fR\->fields" 4
.IX Item "$arrayref = $run->fields"
.ie n .IP "$string = $run\->input" 4
.el .IP "\f(CW$string\fR = \f(CW$run\fR\->input" 4
.IX Item "$string = $run->input"
.ie n .IP "$path = $run\->input_file" 4
.el .IP "\f(CW$path\fR = \f(CW$run\fR\->input_file" 4
.IX Item "$path = $run->input_file"
.ie n .IP "$bool = $run\->io_events" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->io_events" 4
.IX Item "$bool = $run->io_events"
.ie n .IP "$arrayref = $run\->links" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$run\fR\->links" 4
.IX Item "$arrayref = $run->links"
.ie n .IP "$arrayref = $run\->load" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$run\fR\->load" 4
.IX Item "$arrayref = $run->load"
.ie n .IP "$hashref = $run\->load_import" 4
.el .IP "\f(CW$hashref\fR = \f(CW$run\fR\->load_import" 4
.IX Item "$hashref = $run->load_import"
.ie n .IP "$bool = $run\->mem_usage" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->mem_usage" 4
.IX Item "$bool = $run->mem_usage"
.ie n .IP "$int = $run\->retry" 4
.el .IP "\f(CW$int\fR = \f(CW$run\fR\->retry" 4
.IX Item "$int = $run->retry"
.ie n .IP "$bool = $run\->retry_isolated" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->retry_isolated" 4
.IX Item "$bool = $run->retry_isolated"
.ie n .IP "$string = $run\->run_id" 4
.el .IP "\f(CW$string\fR = \f(CW$run\fR\->run_id" 4
.IX Item "$string = $run->run_id"
.ie n .IP "$arrayref = $run\->test_args" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$run\fR\->test_args" 4
.IX Item "$arrayref = $run->test_args"
.ie n .IP "$bool = $run\->unsafe_inc" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->unsafe_inc" 4
.IX Item "$bool = $run->unsafe_inc"
.ie n .IP "$bool = $run\->use_stream" 4
.el .IP "\f(CW$bool\fR = \f(CW$run\fR\->use_stream" 4
.IX Item "$bool = $run->use_stream"
.PD
.SS OTHER
.IX Subsection "OTHER"
.ie n .IP "$hashref = $run\->meta" 4
.el .IP "\f(CW$hashref\fR = \f(CW$run\fR\->meta" 4
.IX Item "$hashref = $run->meta"
meta-data plugins may have attached.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "$path = $run\->run_dir($workdir)" 4
.el .IP "\f(CW$path\fR = \f(CW$run\fR\->run_dir($workdir)" 4
.IX Item "$path = $run->run_dir($workdir)"
Returns the path \f(CW"$workdir/$run_id"\fR.
.ie n .IP "$hashref = $run\->queue_item(\e@PLUGINS)" 4
.el .IP "\f(CW$hashref\fR = \f(CW$run\fR\->queue_item(\e@PLUGINS)" 4
.IX Item "$hashref = $run->queue_item(@PLUGINS)"
Gets the queue item that represents this object.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
