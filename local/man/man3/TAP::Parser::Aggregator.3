.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Aggregator 3"
.TH TAP::Parser::Aggregator 3 2023-10-02 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
TAP::Parser::Aggregator \- Aggregate TAP::Parser results
.SH VERSION
.IX Header "VERSION"
Version 3.48
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use TAP::Parser::Aggregator;
\&
\&    my $aggregate = TAP::Parser::Aggregator\->new;
\&    $aggregate\->add( \*(Aqt/00\-load.t\*(Aq, $load_parser );
\&    $aggregate\->add( \*(Aqt/10\-lex.t\*(Aq,  $lex_parser  );
\&
\&    my $summary = <<\*(AqEND_SUMMARY\*(Aq;
\&    Passed:  %s
\&    Failed:  %s
\&    Unexpectedly succeeded: %s
\&    END_SUMMARY
\&    printf $summary,
\&           scalar $aggregate\->passed,
\&           scalar $aggregate\->failed,
\&           scalar $aggregate\->todo_passed;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`TAP::Parser::Aggregator\*(C'\fR collects parser objects and allows
reporting/querying their aggregate results.
.SH METHODS
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fR\f(CI\*(C`new\*(C'\fR\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\& my $aggregate = TAP::Parser::Aggregator\->new;
.Ve
.PP
Returns a new \f(CW\*(C`TAP::Parser::Aggregator\*(C'\fR object.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fR\f(CI\*(C`add\*(C'\fR\fI\fR
.IX Subsection "add"
.PP
.Vb 1
\&  $aggregate\->add( $description => $parser );
.Ve
.PP
The \f(CW$description\fR is usually a test file name (but only by
convention.)  It is used as a unique identifier (see e.g.
"parsers".)  Reusing a description is a fatal error.
.PP
The \f(CW$parser\fR is a TAP::Parser object.
.PP
\fR\f(CI\*(C`parsers\*(C'\fR\fI\fR
.IX Subsection "parsers"
.PP
.Vb 3
\&  my $count   = $aggregate\->parsers;
\&  my @parsers = $aggregate\->parsers;
\&  my @parsers = $aggregate\->parsers(@descriptions);
.Ve
.PP
In scalar context without arguments, this method returns the number of parsers
aggregated.  In list context without arguments, returns the parsers in the
order they were added.
.PP
If \f(CW@descriptions\fR is given, these correspond to the keys used in each
call to the \fBadd()\fR method.  Returns an array of the requested parsers (in
the requested order) in list context or an array reference in scalar
context.
.PP
Requesting an unknown identifier is a fatal error.
.PP
\fR\f(CI\*(C`descriptions\*(C'\fR\fI\fR
.IX Subsection "descriptions"
.PP
Get an array of descriptions in the order in which they were added to
the aggregator.
.PP
\fR\f(CI\*(C`start\*(C'\fR\fI\fR
.IX Subsection "start"
.PP
Call \f(CW\*(C`start\*(C'\fR immediately before adding any results to the aggregator.
Among other times it records the start time for the test run.
.PP
\fR\f(CI\*(C`stop\*(C'\fR\fI\fR
.IX Subsection "stop"
.PP
Call \f(CW\*(C`stop\*(C'\fR immediately after adding all test results to the aggregator.
.PP
\fR\f(CI\*(C`elapsed\*(C'\fR\fI\fR
.IX Subsection "elapsed"
.PP
Elapsed returns a Benchmark object that represents the running time
of the aggregated tests. In order for \f(CW\*(C`elapsed\*(C'\fR to be valid you must
call \f(CW\*(C`start\*(C'\fR before running the tests and \f(CW\*(C`stop\*(C'\fR immediately
afterwards.
.PP
\fR\f(CI\*(C`elapsed_timestr\*(C'\fR\fI\fR
.IX Subsection "elapsed_timestr"
.PP
Returns a formatted string representing the runtime returned by
\&\f(CWelapsed()\fR.  This lets the caller not worry about Benchmark.
.PP
\fR\f(CI\*(C`all_passed\*(C'\fR\fI\fR
.IX Subsection "all_passed"
.PP
Return true if all the tests passed and no parse errors were detected.
.PP
\fR\f(CI\*(C`get_status\*(C'\fR\fI\fR
.IX Subsection "get_status"
.PP
Get a single word describing the status of the aggregated tests.
Depending on the outcome of the tests returns 'PASS', 'FAIL' or
\&'NOTESTS'. This token is understood by CPAN::Reporter.
.SS "Summary methods"
.IX Subsection "Summary methods"
Each of the following methods will return the total number of corresponding
tests if called in scalar context.  If called in list context, returns the
descriptions of the parsers which contain the corresponding tests (see \f(CW\*(C`add\*(C'\fR
for an explanation of description.
.IP \(bu 4
failed
.IP \(bu 4
parse_errors
.IP \(bu 4
passed
.IP \(bu 4
planned
.IP \(bu 4
skipped
.IP \(bu 4
todo
.IP \(bu 4
todo_passed
.IP \(bu 4
wait
.IP \(bu 4
exit
.PP
For example, to find out how many tests unexpectedly succeeded (TODO tests
which passed when they shouldn't):
.PP
.Vb 2
\& my $count        = $aggregate\->todo_passed;
\& my @descriptions = $aggregate\->todo_passed;
.Ve
.PP
Note that \f(CW\*(C`wait\*(C'\fR and \f(CW\*(C`exit\*(C'\fR are the totals of the wait and exit
statuses of each of the tests. These values are totalled only to provide
a true value if any of them are non-zero.
.PP
\fR\f(CI\*(C`total\*(C'\fR\fI\fR
.IX Subsection "total"
.PP
.Vb 1
\&  my $tests_run = $aggregate\->total;
.Ve
.PP
Returns the total number of tests run.
.PP
\fR\f(CI\*(C`has_problems\*(C'\fR\fI\fR
.IX Subsection "has_problems"
.PP
.Vb 3
\&  if ( $parser\->has_problems ) {
\&      ...
\&  }
.Ve
.PP
Identical to \f(CW\*(C`has_errors\*(C'\fR, but also returns true if any TODO tests
unexpectedly succeeded.  This is more akin to "warnings".
.PP
\fR\f(CI\*(C`has_errors\*(C'\fR\fI\fR
.IX Subsection "has_errors"
.PP
.Vb 3
\&  if ( $parser\->has_errors ) {
\&      ...
\&  }
.Ve
.PP
Returns true if \fIany\fR of the parsers failed.  This includes:
.IP \(bu 4
Failed tests
.IP \(bu 4
Parse errors
.IP \(bu 4
Bad exit or wait status
.PP
\fR\f(CI\*(C`todo_failed\*(C'\fR\fI\fR
.IX Subsection "todo_failed"
.PP
.Vb 1
\&  # deprecated in favor of \*(Aqtodo_passed\*(Aq.  This method was horribly misnamed.
.Ve
.PP
This was a badly misnamed method.  It indicates which TODO tests unexpectedly
succeeded.  Will now issue a warning and call \f(CW\*(C`todo_passed\*(C'\fR.
.SH "See Also"
.IX Header "See Also"
TAP::Parser
.PP
TAP::Harness
