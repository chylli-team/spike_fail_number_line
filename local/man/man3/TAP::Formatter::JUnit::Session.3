.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Formatter::JUnit::Session 3"
.TH TAP::Formatter::JUnit::Session 3 2022-05-15 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
TAP::Formatter::JUnit::Session \- Harness output delegate for JUnit output
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`TAP::Formatter::JUnit::Session\*(C'\fR provides JUnit output formatting for
\&\f(CW\*(C`TAP::Harness\*(C'\fR.
.SH METHODS
.IX Header "METHODS"
.IP _initialize($arg_for) 4
.IX Item "_initialize($arg_for)"
Over-ridden private initializer, so we can accept a new "passing_todo_ok"
argument at instantiation time.
.IP result($result) 4
.IX Item "result($result)"
Called by the harness for each line of TAP it receives.
.Sp
Internally, all of the TAP is added to a queue until we hit the start of
the "next" test (at which point we flush the queue. This allows us to
capture any error output or diagnostic info that comes after a test
failure.
.IP \fBclose_test()\fR 4
.IX Item "close_test()"
Called to close the test session.
.Sp
Flushes the queue if we've got anything left in it, dumps the JUnit to disk
(if necessary), and adds the XML for this test suite to our formatter.
.IP dump_junit_xml($testsuite) 4
.IX Item "dump_junit_xml($testsuite)"
Dumps the JUnit for the given XML \f(CW$testsuite\fR, to the directory specified
by \f(CW\*(C`PERL_TEST_HARNESS_DUMP_TAP\*(C'\fR.
.IP add_testcase($case) 4
.IX Item "add_testcase($case)"
Adds an XML test \f(CW$case\fR to the list of testcases we've run in this
session.
.IP \fBxml()\fR 4
.IX Item "xml()"
Returns a new \f(CW\*(C`XML::Generator\*(C'\fR to generate XML output. This is simply a
shortcut to \f(CW\*(C`$self\->formatter\->xml()\*(C'\fR.
.SH AUTHOR
.IX Header "AUTHOR"
Graham TerMarsch <cpan@howlingfrog.com>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2008\-2010, Graham TerMarsch.  All Rights Reserved.
.PP
This is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Formatter::JUnit.
