.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Runner::Resource::SharedJobSlots 3"
.TH Test2::Harness::Runner::Resource::SharedJobSlots 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Runner::Resource::SharedJobSlots \- limit the job count (\-j) per machine
.SH SYNOPSIS
.IX Header "SYNOPSIS"
\&\fBThis synopsis is not about using this in code, but rather how to use it on the command line.\fR
.PP
In order to use SharedJobSlots you must ether create the \f(CW\*(C`.sharedjobslots.yml\*(C'\fR
file, or provide the \f(CW\*(C`\-\-shared\-jobs\-config PATH\*(C'\fR argument on the command line.
The \f(CW\*(C`PATH\*(C'\fR must be a path to a yaml file with configuration specifications for
job sharing.
.SH "CONFIG FILE"
.IX Header "CONFIG FILE"
Config files for shared slots must be yaml file, they must also be parsable by
YAML::Tiny, which implements a subset of yaml.
.PP
Here is an example config file:
.PP
.Vb 6
\&    \-\-\-
\&    DEFAULT:
\&      state_file: /tmp/yath\-slot\-state
\&      max_slots:  8
\&      max_slots_per_job: 2
\&      max_slots_per_run: 6
\&
\&    myhostname:
\&      state_file: /tmp/myhostname\-slot\-state
\&      max_slots:  16
\&      max_slots_per_job: 4
\&      max_slots_per_run: 12
.Ve
.SS "TOP LEVEL KEYS (HOSTNAMES)"
.IX Subsection "TOP LEVEL KEYS (HOSTNAMES)"
All top level keys are hostnames. When the config is read the settings for the
current hostname will be used. If the hostname is not defined then the
\&\f(CW\*(C`DEFAULT\*(C'\fR host will be read. If there is no \f(CW\*(C`DEFAULT\*(C'\fR host defined an
exception will be thrown.
.SS "CONFIG OPTIONS"
.IX Subsection "CONFIG OPTIONS"
Each option must be specified under a hostname, none of these are valid on
their own.
.IP "state_file: /path/to/shared/state/file" 4
.IX Item "state_file: /path/to/shared/state/file"
\&\fBREQUIRED\fR
.Sp
This specifies the path to the shared state file. All yath processes by all
users who are sharing slots need read+write access to this file.
.IP "state_umask: 0007" 4
.IX Item "state_umask: 0007"
Defaults to \f(CW0007\fR. Used to set the umask of the state file as well as the
lock file.
.IP "max_slots: 8" 4
.IX Item "max_slots: 8"
Max slots system-wide for all users to share.
.IP "max_slots_per_run: 4" 4
.IX Item "max_slots_per_run: 4"
Max slots a specific test run can use.
.IP "min_slots_per_run: 0" 4
.IX Item "min_slots_per_run: 0"
Minimum slots per run.
.Sp
Set this if you want to make sure that all runs get at least N slots,
\&\fBEVEN IF IT MEANS GOING OVER THE SYSTEM-WIDE MAXIMUM!\fR.
.Sp
This defaults to 0.
.IP "max_slots_per_job: 2" 4
.IX Item "max_slots_per_job: 2"
Max slots a specific test job (test file) can use.
.IP "default_slots_per_run: 4" 4
.IX Item "default_slots_per_run: 4"
If the user does not specify a number of slots, use this as the default.
.IP "default_slots_per_job: 2" 4
.IX Item "default_slots_per_job: 2"
If the user does not specify a number of job slots, use this as the default.
.IP "algorithm: fair" 4
.IX Item "algorithm: fair"
.PD 0
.IP "algorithm: first" 4
.IX Item "algorithm: first"
.IP "algorithm: Fully::Qualified::Module::function_name" 4
.IX Item "algorithm: Fully::Qualified::Module::function_name"
.PD
Algorithm to use when assigning slots. 'fair' is the default.
.PP
\fIALGORITHMS\fR
.IX Subsection "ALGORITHMS"
.PP
These are algorithms that are used to decide which test runs get which slots.
.IP fair 4
.IX Item "fair"
\&\fBDEFAULT\fR
.Sp
This algorithm tries to balance slots so that all runs share an equal fraction
of available slots. If there are not enough slots to go around then priority
goes to oldest runs, followed by oldest requests.
.IP first 4
.IX Item "first"
Priority goes to the oldest run, followed by the next oldest, etc. If the run
age is not sufficient to sort requests this will fall back to 'fair'.
.Sp
This is mainly useful for CI systems or batched test boxes. This will give
priority to the first test run started, so additional test runs will not
consume slots the first run wants to use, but if the first run is winding down
and does not need all the slots, the second test run can start using only the
spare slots.
.Sp
Use this with ordered test runs where you do not want a purely serial run
order.
.IP Fully::Qualified::Module::function_name 4
.IX Item "Fully::Qualified::Module::function_name"
You can specify custom algorithms by giving fully qualified subroutine names.
.PP
Example custom algorithm:
.PP
.Vb 2
\&    sub custom_sort {
\&        my ($state_object, $state_data, $a, $b) = @_;
\&
\&        return 1 if a_should_come_first($a, $b);
\&        return \-1 if b_should_come_first($a, $b);
\&        return 0 if both_have_same_priority($a, $b);
\&
\&        # *shrug*
\&        return 0;
\&    }
.Ve
.PP
Ultimately this is used in a \f(CWsort()\fR call, usual rules apply, return should
be 1, 0, or \-1. \f(CW$a\fR and \f(CW$b\fR are the 2 items being compared. \f(CW$state_object\fR is an
instance of \f(CW\*(C`Test2::Harness::Runner::Resource::SharedJobSlots::State\*(C'\fR.
\&\f(CW$state_data\fR is a hashref like you get from \f(CW\*(C`$state_object\->state()\*(C'\fR which
is useful if you want to know how many slots each runner is using for a 'fair'
style algorth.
.PP
Take a look at the \f(CW\*(C`request_sort_XXX\*(C'\fR methods on
\&\f(CW\*(C`Test2::Harness::Runner::Resource::SharedJobSlots::State\*(C'\fR which implement the
3 original sorting methods.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2022 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
