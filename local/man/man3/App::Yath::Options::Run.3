.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Options::Run 3"
.TH App::Yath::Options::Run 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Yath::Options::Run \- Run options for Yath.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is where command lines options for a single test run are defined.
.SH "PROVIDED OPTIONS"
.IX Header "PROVIDED OPTIONS"
.SS "COMMAND OPTIONS"
.IX Subsection "COMMAND OPTIONS"
\fIRun Options\fR
.IX Subsection "Run Options"
.IP \-\-author\-testing 4
.IX Item "--author-testing"
.PD 0
.IP \-A 4
.IX Item "-A"
.IP \-\-no\-author\-testing 4
.IX Item "--no-author-testing"
.PD
This will set the AUTHOR_TESTING environment to true
.IP \-\-dbi\-profiling 4
.IX Item "--dbi-profiling"
.PD 0
.IP \-\-no\-dbi\-profiling 4
.IX Item "--no-dbi-profiling"
.PD
Use Test2::Plugin::DBIProfile to collect database profiling data
.IP "\-\-env\-var VAR=VAL" 4
.IX Item "--env-var VAR=VAL"
.PD 0
.IP \-EVAR=VAL 4
.IX Item "-EVAR=VAL"
.IP "\-E VAR=VAL" 4
.IX Item "-E VAR=VAL"
.IP \-\-no\-env\-var 4
.IX Item "--no-env-var"
.PD
Set environment variables to set when each test is run.
.Sp
Can be specified multiple times
.IP \-\-event\-uuids 4
.IX Item "--event-uuids"
.PD 0
.IP \-\-uuids 4
.IX Item "--uuids"
.IP \-\-no\-event\-uuids 4
.IX Item "--no-event-uuids"
.PD
Use Test2::Plugin::UUID inside tests (default: on)
.IP "\-\-fields name:details" 4
.IX Item "--fields name:details"
.PD 0
.IP "\-\-fields JSON_STRING" 4
.IX Item "--fields JSON_STRING"
.IP "\-f name:details" 4
.IX Item "-f name:details"
.IP "\-f JSON_STRING" 4
.IX Item "-f JSON_STRING"
.IP \-\-no\-fields 4
.IX Item "--no-fields"
.PD
Add custom data to the harness run
.Sp
Can be specified multiple times
.IP "\-\-input ARG" 4
.IX Item "--input ARG"
.PD 0
.IP \-\-input=ARG 4
.IX Item "--input=ARG"
.IP \-\-no\-input 4
.IX Item "--no-input"
.PD
Input string to be used as standard input for ALL tests. See also: \-\-input\-file
.IP "\-\-input\-file ARG" 4
.IX Item "--input-file ARG"
.PD 0
.IP \-\-input\-file=ARG 4
.IX Item "--input-file=ARG"
.IP \-\-no\-input\-file 4
.IX Item "--no-input-file"
.PD
Use the specified file as standard input to ALL tests
.IP \-\-io\-events 4
.IX Item "--io-events"
.PD 0
.IP \-\-no\-io\-events 4
.IX Item "--no-io-events"
.PD
Use Test2::Plugin::IOEvents inside tests to turn all prints into test2 events (default: off)
.IP "\-\-link 'https://travis.work/builds/42'" 4
.IX Item "--link 'https://travis.work/builds/42'"
.PD 0
.IP "\-\-link 'https://jenkins.work/job/42'" 4
.IX Item "--link 'https://jenkins.work/job/42'"
.IP "\-\-link 'https://buildbot.work/builders/foo/builds/42'" 4
.IX Item "--link 'https://buildbot.work/builders/foo/builds/42'"
.IP \-\-no\-link 4
.IX Item "--no-link"
.PD
Provide one or more links people can follow to see more about this run.
.Sp
Can be specified multiple times
.IP "\-\-load ARG" 4
.IX Item "--load ARG"
.PD 0
.IP \-\-load=ARG 4
.IX Item "--load=ARG"
.IP "\-\-load\-module ARG" 4
.IX Item "--load-module ARG"
.IP \-\-load\-module=ARG 4
.IX Item "--load-module=ARG"
.IP "\-m ARG" 4
.IX Item "-m ARG"
.IP \-m=ARG 4
.IX Item "-m=ARG"
.IP \-\-no\-load 4
.IX Item "--no-load"
.PD
Load a module in each test (after fork). The "import" method is not called.
.Sp
Can be specified multiple times
.IP "\-\-load\-import Module" 4
.IX Item "--load-import Module"
.PD 0
.IP "\-\-load\-import Module=import_arg1,arg2,..." 4
.IX Item "--load-import Module=import_arg1,arg2,..."
.IP "\-\-loadim Module" 4
.IX Item "--loadim Module"
.IP "\-\-loadim Module=import_arg1,arg2,..." 4
.IX Item "--loadim Module=import_arg1,arg2,..."
.IP "\-M Module" 4
.IX Item "-M Module"
.IP "\-M Module=import_arg1,arg2,..." 4
.IX Item "-M Module=import_arg1,arg2,..."
.IP \-\-no\-load\-import 4
.IX Item "--no-load-import"
.PD
Load a module in each test (after fork). Import is called.
.Sp
Can be specified multiple times. If the same key is listed multiple times the value lists will be appended together.
.IP \-\-mem\-usage 4
.IX Item "--mem-usage"
.PD 0
.IP \-\-no\-mem\-usage 4
.IX Item "--no-mem-usage"
.PD
Use Test2::Plugin::MemUsage inside tests (default: on)
.IP "\-\-retry ARG" 4
.IX Item "--retry ARG"
.PD 0
.IP \-\-retry=ARG 4
.IX Item "--retry=ARG"
.IP "\-r ARG" 4
.IX Item "-r ARG"
.IP \-r=ARG 4
.IX Item "-r=ARG"
.IP \-\-no\-retry 4
.IX Item "--no-retry"
.PD
Run any jobs that failed a second time. NOTE: \-\-retry=1 means failing tests will be attempted twice!
.IP \-\-retry\-isolated 4
.IX Item "--retry-isolated"
.PD 0
.IP \-\-retry\-iso 4
.IX Item "--retry-iso"
.IP \-\-no\-retry\-isolated 4
.IX Item "--no-retry-isolated"
.PD
If true then any job retries will be done in isolation (as though \-j1 was set)
.IP \-\-run\-id 4
.IX Item "--run-id"
.PD 0
.IP \-\-id 4
.IX Item "--id"
.IP \-\-no\-run\-id 4
.IX Item "--no-run-id"
.PD
Set a specific run-id. (Default: a UUID)
.IP "\-\-test\-args ARG" 4
.IX Item "--test-args ARG"
.PD 0
.IP \-\-test\-args=ARG 4
.IX Item "--test-args=ARG"
.IP \-\-no\-test\-args 4
.IX Item "--no-test-args"
.PD
Arguments to pass in as \f(CW@ARGV\fR for all tests that are run. These can be provided easier using the '::' argument separator.
.Sp
Can be specified multiple times
.IP \-\-stream 4
.IX Item "--stream"
.PD 0
.IP \-\-no\-stream 4
.IX Item "--no-stream"
.PD
Use the stream formatter (default is on)
.IP \-\-tap 4
.IX Item "--tap"
.PD 0
.IP \-\-TAP 4
.IX Item "--TAP"
.IP \-\-\-\-no\-stream 4
.IX Item "----no-stream"
.IP \-\-no\-tap 4
.IX Item "--no-tap"
.PD
The TAP format is lossy and clunky. Test2::Harness normally uses a newer streaming format to receive test results. There are old/legacy tests where this causes problems, in which case setting \-\-TAP or \-\-no\-stream can help.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
