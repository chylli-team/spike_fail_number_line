.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Event::V2 3"
.TH Test2::Event::V2 3 2023-11-30 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Event::V2 \- Second generation event.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is the event type that should be used instead of Test2::Event or its
legacy subclasses.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SS "USING A CONTEXT"
.IX Subsection "USING A CONTEXT"
.Vb 1
\&    use Test2::API qw/context/;
\&
\&    sub my_tool {
\&        my $ctx = context();
\&
\&        my $event = $ctx\->send_ev2(info => [{tag => \*(AqNOTE\*(Aq, details => "This is a note"}]);
\&
\&        $ctx\->release;
\&
\&        return $event;
\&    }
.Ve
.SS "USING THE CONSTRUCTOR"
.IX Subsection "USING THE CONSTRUCTOR"
.Vb 1
\&    use Test2::Event::V2;
\&
\&    my $e = Test2::Event::V2\->new(
\&        trace => {frame => [$PKG, $FILE, $LINE, $SUBNAME]},
\&        info  => [{tag => \*(AqNOTE\*(Aq, details => "This is a note"}],
\&    );
.Ve
.SH METHODS
.IX Header "METHODS"
This class inherits from Test2::Event.
.ie n .IP "$fd = $e\->\fBfacet_data()\fR" 4
.el .IP "\f(CW$fd\fR = \f(CW$e\fR\->\fBfacet_data()\fR" 4
.IX Item "$fd = $e->facet_data()"
This will return a hashref of facet data. Each facet hash will be a shallow
copy of the original.
.ie n .IP "$about = $e\->\fBabout()\fR" 4
.el .IP "\f(CW$about\fR = \f(CW$e\fR\->\fBabout()\fR" 4
.IX Item "$about = $e->about()"
This will return the 'about' facet hashref.
.Sp
\&\fBNOTE:\fR This will return the internal hashref, not a copy.
.ie n .IP "$trace = $e\->\fBtrace()\fR" 4
.el .IP "\f(CW$trace\fR = \f(CW$e\fR\->\fBtrace()\fR" 4
.IX Item "$trace = $e->trace()"
This will return the 'trace' facet, normally blessed (but this is not enforced
when the trace is set using \f(CWset_trace()\fR.
.Sp
\&\fBNOTE:\fR This will return the internal trace, not a copy.
.SS MUTATION
.IX Subsection "MUTATION"
.ie n .IP $e\->add_amnesty({...}) 4
.el .IP \f(CW$e\fR\->add_amnesty({...}) 4
.IX Item "$e->add_amnesty({...})"
Inherited from Test2::Event. This can be used to add 'amnesty' facets to an
existing event. Each new item is added to the \fBEND\fR of the list.
.Sp
\&\fBNOTE:\fR Items \fBARE\fR blessed when added.
.ie n .IP $e\->add_hub({...}) 4
.el .IP \f(CW$e\fR\->add_hub({...}) 4
.IX Item "$e->add_hub({...})"
Inherited from Test2::Event. This is used by hubs to stamp events as they
pass through. New items are added to the \fBSTART\fR of the list.
.Sp
\&\fBNOTE:\fR Items \fBARE NOT\fR blessed when added.
.ie n .IP $e\->set_uuid($UUID) 4
.el .IP \f(CW$e\fR\->set_uuid($UUID) 4
.IX Item "$e->set_uuid($UUID)"
Inherited from Test2::Event, overridden to also vivify/mutate the 'about'
facet.
.ie n .IP $e\->set_trace($trace) 4
.el .IP \f(CW$e\fR\->set_trace($trace) 4
.IX Item "$e->set_trace($trace)"
Inherited from Test2::Event which allows you to change the trace.
.Sp
\&\fBNote:\fR This method does not bless/clone the trace for you. Many things will
expect the trace to be blessed, so you should probably do that.
.SS "LEGACY SUPPORT METHODS"
.IX Subsection "LEGACY SUPPORT METHODS"
These are all imported from Test2::Util::Facets2Legacy, see that module or
Test2::Event for documentation on what they do.
.IP causes_fail 4
.IX Item "causes_fail"
.PD 0
.IP diagnostics 4
.IX Item "diagnostics"
.IP global 4
.IX Item "global"
.IP increments_count 4
.IX Item "increments_count"
.IP no_display 4
.IX Item "no_display"
.IP sets_plan 4
.IX Item "sets_plan"
.IP subtest_id 4
.IX Item "subtest_id"
.IP summary 4
.IX Item "summary"
.IP terminate 4
.IX Item "terminate"
.PD
.SH "THIRD PARTY META-DATA"
.IX Header "THIRD PARTY META-DATA"
This object consumes Test2::Util::ExternalMeta which provides a consistent
way for you to attach meta-data to instances of this class. This is useful for
tools, plugins, and other extensions.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
