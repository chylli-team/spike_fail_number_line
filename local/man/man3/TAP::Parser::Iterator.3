.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Iterator 3"
.TH TAP::Parser::Iterator 3 2023-10-02 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
TAP::Parser::Iterator \- Base class for TAP source iterators
.SH VERSION
.IX Header "VERSION"
Version 3.48
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 6
\&  # to subclass:
\&  use TAP::Parser::Iterator ();
\&  use base \*(AqTAP::Parser::Iterator\*(Aq;
\&  sub _initialize {
\&    # see TAP::Object...
\&  }
\&
\&  sub next_raw { ... }
\&  sub wait     { ... }
\&  sub exit     { ... }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a simple iterator base class that defines TAP::Parser's iterator
API.  Iterators are typically created from TAP::Parser::SourceHandlers.
.SH METHODS
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fR\f(CI\*(C`new\*(C'\fR\fI\fR
.IX Subsection "new"
.PP
Create an iterator.  Provided by TAP::Object.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fR\f(CI\*(C`next\*(C'\fR\fI\fR
.IX Subsection "next"
.PP
.Vb 1
\& while ( my $item = $iter\->next ) { ... }
.Ve
.PP
Iterate through it, of course.
.PP
\fR\f(CI\*(C`next_raw\*(C'\fR\fI\fR
.IX Subsection "next_raw"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& while ( my $item = $iter\->next_raw ) { ... }
.Ve
.PP
Iterate raw input without applying any fixes for quirky input syntax.
.PP
\fR\f(CI\*(C`handle_unicode\*(C'\fR\fI\fR
.IX Subsection "handle_unicode"
.PP
If necessary switch the input stream to handle unicode. This only has
any effect for I/O handle based streams.
.PP
The default implementation does nothing.
.PP
\fR\f(CI\*(C`get_select_handles\*(C'\fR\fI\fR
.IX Subsection "get_select_handles"
.PP
Return a list of filehandles that may be used upstream in a \fBselect()\fR
call to signal that this Iterator is ready. Iterators that are not
handle-based should return an empty list.
.PP
The default implementation does nothing.
.PP
\fR\f(CI\*(C`wait\*(C'\fR\fI\fR
.IX Subsection "wait"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& my $wait_status = $iter\->wait;
.Ve
.PP
Return the \f(CW\*(C`wait\*(C'\fR status for this iterator.
.PP
\fR\f(CI\*(C`exit\*(C'\fR\fI\fR
.IX Subsection "exit"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& my $wait_status = $iter\->exit;
.Ve
.PP
Return the \f(CW\*(C`exit\*(C'\fR status for this iterator.
.SH SUBCLASSING
.IX Header "SUBCLASSING"
Please see "SUBCLASSING" in TAP::Parser for a subclassing overview.
.PP
You must override the abstract methods as noted above.
.SS Example
.IX Subsection "Example"
TAP::Parser::Iterator::Array is probably the easiest example to follow.
There's not much point repeating it here.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::Iterator::Array,
TAP::Parser::Iterator::Stream,
TAP::Parser::Iterator::Process,
