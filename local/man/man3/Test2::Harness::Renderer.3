.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Renderer 3"
.TH Test2::Harness::Renderer 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Renderer \- Base class for Test2::Harness event renderers.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
These are set at construction time and cannot be changed.
.ie n .IP "$settings = $renderer\->settings" 4
.el .IP "\f(CW$settings\fR = \f(CW$renderer\fR\->settings" 4
.IX Item "$settings = $renderer->settings"
Get the Test2::Harness::Settings reference.
.ie n .IP "$int = $renderer\->verbose" 4
.el .IP "\f(CW$int\fR = \f(CW$renderer\fR\->verbose" 4
.IX Item "$int = $renderer->verbose"
Get the verbosity level.
.ie n .IP "$bool = $renderer\->progress" 4
.el .IP "\f(CW$bool\fR = \f(CW$renderer\fR\->progress" 4
.IX Item "$bool = $renderer->progress"
True if progress indicators should be shown.
.ie n .IP "$bool = $renderer\->color" 4
.el .IP "\f(CW$bool\fR = \f(CW$renderer\fR\->color" 4
.IX Item "$bool = $renderer->color"
True if color should be used.
.SH METHODS
.IX Header "METHODS"
.ie n .IP $renderer\->render_event($event) 4
.el .IP \f(CW$renderer\fR\->render_event($event) 4
.IX Item "$renderer->render_event($event)"
Called for every event. Return is ignored.
.ie n .IP $renderer\->finish(%ARGS) 4
.el .IP \f(CW$renderer\fR\->finish(%ARGS) 4
.IX Item "$renderer->finish(%ARGS)"
Called once after testing is done.
.Sp
\&\f(CW%ARGS\fR:
.ie n .IP $renderer\->signal($signal) 4
.el .IP \f(CW$renderer\fR\->signal($signal) 4
.IX Item "$renderer->signal($signal)"
Called when the rendering process receives a signal. This is your chance to do
any cleanup or report the signal. This is not an event, you can ignore it. Do
not exit or throw any exceptions here please.
.RS 4
.ie n .IP "settings => $settings" 4
.el .IP "settings => \f(CW$settings\fR" 4
.IX Item "settings => $settings"
Get the Test2::Harness::Settings reference.
.ie n .IP "pass => $bool" 4
.el .IP "pass => \f(CW$bool\fR" 4
.IX Item "pass => $bool"
True if tests passed.
.ie n .IP "tests_seen => $int" 4
.el .IP "tests_seen => \f(CW$int\fR" 4
.IX Item "tests_seen => $int"
Number of test files seen.
.ie n .IP "asserts_seen => $int" 4
.el .IP "asserts_seen => \f(CW$int\fR" 4
.IX Item "asserts_seen => $int"
Number of assertions made.
.ie n .IP "final_data => $final_data" 4
.el .IP "final_data => \f(CW$final_data\fR" 4
.IX Item "final_data => $final_data"
The final_data looks like this, note that some data may not be present if it is
not applicable. The data structure can be as simple as
\&\f(CW\*(C`{ pass => $bool }\*(C'\fR.
.Sp
.Vb 2
\&    {
\&        pass => $pass,    # boolean, did the test run pass or fail?
\&
\&        failed => [       # Jobs that failed, and did not pass on a retry
\&            [$job_id1, $file1],    # Failing job 1
\&            [$job_id2, $file2],    # Failing job 2
\&            ...
\&        ],
\&        retried => [               # Jobs that failed and were retried
\&            [$job_id1, $times_run1, $file1, $passed_eventually1],    # Passed_eventually is a boolean
\&            [$job_id2, $times_run2, $file2, $passed_eventually2],
\&            ...
\&        ],
\&        hatled => [                                                  # Jobs that caused the entire test suite to halt
\&            [$job_id1, $file1, $halt_reason1],                       # halt_reason is a human readible string
\&            [$job_id2, $file2, $halt_reason2],
\&        ],
\&    }
.Ve
.RE
.RS 4
.RE
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
