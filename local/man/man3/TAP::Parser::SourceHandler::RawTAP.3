.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "TAP::Parser::SourceHandler::RawTAP 3"
.TH TAP::Parser::SourceHandler::RawTAP 3 2023-10-02 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
TAP::Parser::SourceHandler::RawTAP \- Stream output from raw TAP in a scalar/array ref.
.SH VERSION
.IX Header "VERSION"
Version 3.48
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use TAP::Parser::Source;
\&  use TAP::Parser::SourceHandler::RawTAP;
\&
\&  my $source = TAP::Parser::Source\->new\->raw( \e"1..1\enok 1\en" );
\&  $source\->assemble_meta;
\&
\&  my $class = \*(AqTAP::Parser::SourceHandler::RawTAP\*(Aq;
\&  my $vote  = $class\->can_handle( $source );
\&  my $iter  = $class\->make_iterator( $source );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a \fIraw TAP output\fR TAP::Parser::SourceHandler \- it has 2 jobs:
.PP
1. Figure out if the TAP::Parser::Source it's given is raw TAP output
("can_handle").
.PP
2. Creates an iterator for raw TAP output ("make_iterator").
.PP
Unless you're writing a plugin or subclassing TAP::Parser, you probably
won't need to use this module directly.
.SH METHODS
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fR\f(CI\*(C`can_handle\*(C'\fR\fI\fR
.IX Subsection "can_handle"
.PP
.Vb 1
\&  my $vote = $class\->can_handle( $source );
.Ve
.PP
Only votes if \f(CW$source\fR is an array, or a scalar with newlines.  Casts the
following votes:
.PP
.Vb 4
\&  0.9  if it\*(Aqs a scalar with \*(Aq..\*(Aq in it
\&  0.7  if it\*(Aqs a scalar with \*(Aqok\*(Aq in it
\&  0.3  if it\*(Aqs just a scalar with newlines
\&  0.5  if it\*(Aqs an array
.Ve
.PP
\fR\f(CI\*(C`make_iterator\*(C'\fR\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $class\->make_iterator( $source );
.Ve
.PP
Returns a new TAP::Parser::Iterator::Array for the source.
\&\f(CW\*(C`$source\->raw\*(C'\fR must be an array ref, or a scalar ref.
.PP
\&\f(CW\*(C`croak\*(C'\fRs on error.
.SH SUBCLASSING
.IX Header "SUBCLASSING"
Please see "SUBCLASSING" in TAP::Parser for a subclassing overview.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::IteratorFactory,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::Executable,
TAP::Parser::SourceHandler::Perl,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Handle
