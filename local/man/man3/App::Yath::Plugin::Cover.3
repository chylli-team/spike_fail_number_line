.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Plugin::Cover 3"
.TH App::Yath::Plugin::Cover 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Yath::Plugin::Cover \- Plugin to collect and report basic coverage data
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Simple coverage data, file and sub coverage only. Use Devel::Cover if you
want deep coverage stats.
.SH "PROVIDED OPTIONS"
.IX Header "PROVIDED OPTIONS"
.SS "COMMAND OPTIONS"
.IX Subsection "COMMAND OPTIONS"
\fICover Options\fR
.IX Subsection "Cover Options"
.IP "\-\-cover\-aggregator ByTest" 4
.IX Item "--cover-aggregator ByTest"
.PD 0
.IP "\-\-cover\-aggregator ByRun" 4
.IX Item "--cover-aggregator ByRun"
.IP "\-\-cover\-aggregator +Custom::Aggregator" 4
.IX Item "--cover-aggregator +Custom::Aggregator"
.IP "\-\-cover\-agg ByTest" 4
.IX Item "--cover-agg ByTest"
.IP "\-\-cover\-agg ByRun" 4
.IX Item "--cover-agg ByRun"
.IP "\-\-cover\-agg +Custom::Aggregator" 4
.IX Item "--cover-agg +Custom::Aggregator"
.IP \-\-no\-cover\-aggregator 4
.IX Item "--no-cover-aggregator"
.PD
Choose a custom aggregator subclass
.IP "\-\-cover\-class ARG" 4
.IX Item "--cover-class ARG"
.PD 0
.IP \-\-cover\-class=ARG 4
.IX Item "--cover-class=ARG"
.IP \-\-no\-cover\-class 4
.IX Item "--no-cover-class"
.PD
Choose a Test2::Plugin::Cover subclass
.IP "\-\-cover\-dirs ARG" 4
.IX Item "--cover-dirs ARG"
.PD 0
.IP \-\-cover\-dirs=ARG 4
.IX Item "--cover-dirs=ARG"
.IP "\-\-cover\-dir ARG" 4
.IX Item "--cover-dir ARG"
.IP \-\-cover\-dir=ARG 4
.IX Item "--cover-dir=ARG"
.IP \-\-no\-cover\-dirs 4
.IX Item "--no-cover-dirs"
.PD
NO DESCRIPTION \- FIX ME
.Sp
Can be specified multiple times
.IP \-\-cover\-exclude\-private 4
.IX Item "--cover-exclude-private"
.PD 0
.IP \-\-no\-cover\-exclude\-private 4
.IX Item "--no-cover-exclude-private"
.IP \-\-cover\-files 4
.IX Item "--cover-files"
.IP \-\-no\-cover\-files 4
.IX Item "--no-cover-files"
.PD
Use Test2::Plugin::Cover to collect coverage data for what files are touched by what tests. Unlike Devel::Cover this has very little performance impact (About 4% difference)
.IP "\-\-cover\-from path/to/log.jsonl" 4
.IX Item "--cover-from path/to/log.jsonl"
.PD 0
.IP "\-\-cover\-from http://example.com/coverage" 4
.IX Item "--cover-from http://example.com/coverage"
.IP "\-\-cover\-from path/to/coverage.jsonl" 4
.IX Item "--cover-from path/to/coverage.jsonl"
.IP \-\-no\-cover\-from 4
.IX Item "--no-cover-from"
.PD
This can be a test log, a coverage dump (old style json or new jsonl format), or a url to any of the previous. Tests will not be run if the file/url is invalid.
.IP "\-\-cover\-from\-type json" 4
.IX Item "--cover-from-type json"
.PD 0
.IP "\-\-cover\-from\-type jsonl" 4
.IX Item "--cover-from-type jsonl"
.IP "\-\-cover\-from\-type log" 4
.IX Item "--cover-from-type log"
.IP \-\-no\-cover\-from\-type 4
.IX Item "--no-cover-from-type"
.PD
File type for coverage source. Usually it can be detected, but when it cannot be you should specify. "json" is old style single-blob coverage data, "jsonl" is the new by-test style, "log" is a logfile from a previous run.
.IP "\-\-cover\-manager My::Coverage::Manager" 4
.IX Item "--cover-manager My::Coverage::Manager"
.PD 0
.IP \-\-no\-cover\-manager 4
.IX Item "--no-cover-manager"
.PD
Coverage 'from' manager to use when coverage data does not provide one
.IP "\-\-cover\-maybe\-from path/to/log.jsonl" 4
.IX Item "--cover-maybe-from path/to/log.jsonl"
.PD 0
.IP "\-\-cover\-maybe\-from http://example.com/coverage" 4
.IX Item "--cover-maybe-from http://example.com/coverage"
.IP "\-\-cover\-maybe\-from path/to/coverage.jsonl" 4
.IX Item "--cover-maybe-from path/to/coverage.jsonl"
.IP \-\-no\-cover\-maybe\-from 4
.IX Item "--no-cover-maybe-from"
.PD
This can be a test log, a coverage dump (old style json or new jsonl format), or a url to any of the previous. Tests will coninue if even if the coverage file/url is invalid.
.IP "\-\-cover\-maybe\-from\-type json" 4
.IX Item "--cover-maybe-from-type json"
.PD 0
.IP "\-\-cover\-maybe\-from\-type jsonl" 4
.IX Item "--cover-maybe-from-type jsonl"
.IP "\-\-cover\-maybe\-from\-type log" 4
.IX Item "--cover-maybe-from-type log"
.IP \-\-no\-cover\-maybe\-from\-type 4
.IX Item "--no-cover-maybe-from-type"
.PD
Same as "from_type" but for "maybe_from". Defaults to "from_type" if that is specified, otherwise auto-detect
.IP \-\-cover\-metrics 4
.IX Item "--cover-metrics"
.PD 0
.IP \-\-no\-cover\-metrics 4
.IX Item "--no-cover-metrics"
.IP "\-\-cover\-types ARG" 4
.IX Item "--cover-types ARG"
.IP \-\-cover\-types=ARG 4
.IX Item "--cover-types=ARG"
.IP "\-\-cover\-type ARG" 4
.IX Item "--cover-type ARG"
.IP \-\-cover\-type=ARG 4
.IX Item "--cover-type=ARG"
.IP \-\-no\-cover\-types 4
.IX Item "--no-cover-types"
.PD
NO DESCRIPTION \- FIX ME
.Sp
Can be specified multiple times
.IP \-\-cover\-write 4
.IX Item "--cover-write"
.PD 0
.IP \-\-cover\-write=coverage.jsonl 4
.IX Item "--cover-write=coverage.jsonl"
.IP \-\-cover\-write=coverage.json 4
.IX Item "--cover-write=coverage.json"
.IP \-\-no\-cover\-write 4
.IX Item "--no-cover-write"
.PD
Create a json or jsonl file of all coverage data seen during the run (This implies \-\-cover\-files).
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
