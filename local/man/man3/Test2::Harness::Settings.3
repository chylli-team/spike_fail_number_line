.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Settings 3"
.TH Test2::Harness::Settings 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Settings \- Configuration settings for Test2::Harness.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module represents the options provided at the command line. Each option
has a prefix, and each prefix can be accessed from the settings.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    # You will rarely if ever need to construct settings yourself, usually a
\&    # component of Test2::Harness will expose them to you.
\&    my $settings = $thing\->settings;
\&
\&    # All prefixes have a method generated for them via AUTOLOAD
\&    my $display = $settings\->display;
\&
\&    # You can also use the prefix method
\&    my $display = $settings\->prefix(\*(Aqdisplay\*(Aq);
\&
\&
\&    # The prefix can be used in a similar way
\&    my $verbose = $settings\->display\->verbose;
.Ve
.PP
See Test2::Harness::Settings::Prefix for more details on how to use the prefixes.
.SH METHODS
.IX Header "METHODS"
Note that any prefix that does not conflict with the predefined methods can be
accessed via AUTOLOAD generating the methods as needed.
.ie n .IP $settings\->define_prefix($prefix_name) 4
.el .IP \f(CW$settings\fR\->define_prefix($prefix_name) 4
.IX Item "$settings->define_prefix($prefix_name)"
This is used to create a prefix.
.ie n .IP "$bool = $settings\->check_prefix($prefix_name)" 4
.el .IP "\f(CW$bool\fR = \f(CW$settings\fR\->check_prefix($prefix_name)" 4
.IX Item "$bool = $settings->check_prefix($prefix_name)"
This is used to check if a prefix is defined or not.
.ie n .IP "$prefix = $settings\->prefix($prefix_name)" 4
.el .IP "\f(CW$prefix\fR = \f(CW$settings\fR\->prefix($prefix_name)" 4
.IX Item "$prefix = $settings->prefix($prefix_name)"
.PD 0
.ie n .IP "$prefix = $settings\->$prefix_name" 4
.el .IP "\f(CW$prefix\fR = \f(CW$settings\fR\->$prefix_name" 4
.IX Item "$prefix = $settings->$prefix_name"
.PD
This will retrieve a prefix if it exists. If the prefix is not defined this
will throw an exception. If you are unsure if a prefix exists use
\&\f(CW\*(C`$settings\-\*(C'\fRcheck_prefix($prefix_name)>.
.ie n .IP "$thing = $settings\->build($prefix_name, $class, @args)" 4
.el .IP "\f(CW$thing\fR = \f(CW$settings\fR\->build($prefix_name, \f(CW$class\fR, \f(CW@args\fR)" 4
.IX Item "$thing = $settings->build($prefix_name, $class, @args)"
This will create an instance of \f(CW$class\fR passing the key/value pairs from the
specified prefix as arguments. Additional arguments can be provided in
\&\f(CW@args\fR.
.ie n .IP "$hashref = $settings\->\fBTO_JSON()\fR" 4
.el .IP "\f(CW$hashref\fR = \f(CW$settings\fR\->\fBTO_JSON()\fR" 4
.IX Item "$hashref = $settings->TO_JSON()"
This method allows settings to be serialized into JSON.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
