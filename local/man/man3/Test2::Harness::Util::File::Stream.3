.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Util::File::Stream 3"
.TH Test2::Harness::Util::File::Stream 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Util::File::Stream \- Utility class for manipulating a file that
serves as an output stream.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Subclass of Test2::Harness::File that streams the contents of a file, even
if the file is still being written.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Harness::Util::File::Stream;
\&
\&    my $stream = Test2::Harness::Util::File::Stream\->new(name => \*(Aqpath/to/file\*(Aq);
\&
\&    # Read some lines
\&    my @lines = $stream\->poll;
\&
\&    ...
\&
\&    # Read more lines, if any.
\&    push @lines => $stream\->poll;
.Ve
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
See Test2::Harness::File for additional attributes.
.PP
These can be passed in as construction arguments if desired.
.ie n .IP "$bool = $stream\->use_write_lock" 4
.el .IP "\f(CW$bool\fR = \f(CW$stream\fR\->use_write_lock" 4
.IX Item "$bool = $stream->use_write_lock"
.PD 0
.ie n .IP $stream\->use_write_lock($bool) 4
.el .IP \f(CW$stream\fR\->use_write_lock($bool) 4
.IX Item "$stream->use_write_lock($bool)"
.PD
Lock the file for every \f(CWwrite()\fR operation.
.ie n .IP "$bool = $stream\->tail" 4
.el .IP "\f(CW$bool\fR = \f(CW$stream\fR\->tail" 4
.IX Item "$bool = $stream->tail"
Start near the end of the file and only poll for updates appended to it.
.SH METHODS
.IX Header "METHODS"
See Test2::Harness::File for additional methods.
.ie n .IP "@lines = $stream\->\fBread()\fR" 4
.el .IP "\f(CW@lines\fR = \f(CW$stream\fR\->\fBread()\fR" 4
.IX Item "@lines = $stream->read()"
Read all lines from the beginning. Every time it is called it returns ALL lines.
.ie n .IP "@lines = $stream\->\fBpoll()\fR" 4
.el .IP "\f(CW@lines\fR = \f(CW$stream\fR\->\fBpoll()\fR" 4
.IX Item "@lines = $stream->poll()"
.PD 0
.ie n .IP "@lines = $stream\->poll(max => $int)" 4
.el .IP "\f(CW@lines\fR = \f(CW$stream\fR\->poll(max => \f(CW$int\fR)" 4
.IX Item "@lines = $stream->poll(max => $int)"
.PD
Poll for lines. This is an iterator, it should not return the same line more
than once, you can call it multiple times to get any additional lines that have
been added since the last poll.
.ie n .IP $stream\->write(@content) 4
.el .IP \f(CW$stream\fR\->write(@content) 4
.IX Item "$stream->write(@content)"
Append \f(CW@content\fR to the file.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
