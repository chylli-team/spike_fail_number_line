.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::IPC 3"
.TH Test2::Harness::IPC 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::IPC \- Base class for modules that control child processes.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is the base class for all parts of Test2::Harness that have to
do process management.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.ie n .IP "$pid = $ipc\->pid" 4
.el .IP "\f(CW$pid\fR = \f(CW$ipc\fR\->pid" 4
.IX Item "$pid = $ipc->pid"
The root PID of the IPC object.
.ie n .IP "$hashref = $ipc\->handlers" 4
.el .IP "\f(CW$hashref\fR = \f(CW$ipc\fR\->handlers" 4
.IX Item "$hashref = $ipc->handlers"
Custom signal handlers specific to the IPC object.
.ie n .IP "$hashref = $ipc\->procs" 4
.el .IP "\f(CW$hashref\fR = \f(CW$ipc\fR\->procs" 4
.IX Item "$hashref = $ipc->procs"
Hashref of \f(CW\*(C`$pid => $proc\*(C'\fR where \f(CW$proc\fR is an instance of
Test2::Harness::IPC::Proc.
.ie n .IP "$hashref = $ipc\->procs_by_cat" 4
.el .IP "\f(CW$hashref\fR = \f(CW$ipc\fR\->procs_by_cat" 4
.IX Item "$hashref = $ipc->procs_by_cat"
Hashref of \f(CW\*(C`$category => { $pid => $proc }\*(C'\fR.
.ie n .IP "$hashref = $ipc\->waiting" 4
.el .IP "\f(CW$hashref\fR = \f(CW$ipc\fR\->waiting" 4
.IX Item "$hashref = $ipc->waiting"
Hashref of processes that have finished, but have not been handled yet.
.Sp
This is an implementation detail you should not rely on.
.ie n .IP "$float = $ipc\->wait_time" 4
.el .IP "\f(CW$float\fR = \f(CW$ipc\fR\->wait_time" 4
.IX Item "$float = $ipc->wait_time"
How long to sleep between loops when in a wait cycle.
.ie n .IP "$bool = $ipc\->started" 4
.el .IP "\f(CW$bool\fR = \f(CW$ipc\fR\->started" 4
.IX Item "$bool = $ipc->started"
True if the IPC process has started.
.ie n .IP $ipc\->sig_count 4
.el .IP \f(CW$ipc\fR\->sig_count 4
.IX Item "$ipc->sig_count"
Implementation detail, used to break wait loops when signals are received.
.SH METHODS
.IX Header "METHODS"
.ie n .IP $ipc\->start 4
.el .IP \f(CW$ipc\fR\->start 4
.IX Item "$ipc->start"
Start the IPC management (Insert signal handlers).
.ie n .IP $ipc\->stop 4
.el .IP \f(CW$ipc\fR\->stop 4
.IX Item "$ipc->stop"
Stop the IPC management (Remove signal handlers).
.ie n .IP "$ipc\->set_sig_handler($sig, sub { ... })" 4
.el .IP "\f(CW$ipc\fR\->set_sig_handler($sig, sub { ... })" 4
.IX Item "$ipc->set_sig_handler($sig, sub { ... })"
Set a custom signal handler. This is a safer version of
\&\f(CW\*(C`local %SIG{$sig}\*(C'\fR for use with IPC.
.Sp
The callback will get exactly one argument, the name of the signal that was
recieved.
.ie n .IP $ipc\->handle_sig($sig) 4
.el .IP \f(CW$ipc\fR\->handle_sig($sig) 4
.IX Item "$ipc->handle_sig($sig)"
Handle the specified signal. Will cause process exit if the signal has no
handler.
.ie n .IP $ipc\->\fBkillall()\fR 4
.el .IP \f(CW$ipc\fR\->\fBkillall()\fR 4
.IX Item "$ipc->killall()"
.PD 0
.ie n .IP $ipc\->killall($sig) 4
.el .IP \f(CW$ipc\fR\->killall($sig) 4
.IX Item "$ipc->killall($sig)"
.PD
Kill all tracked child process with the given signal. \f(CW\*(C`TERM\*(C'\fR is used if no
signal is specified.
.Sp
This will not wait on the processes, you must call \f(CW\*(C`$ipc\->wait()\*(C'\fR.
.ie n .IP $ipc\->check_timeouts 4
.el .IP \f(CW$ipc\fR\->check_timeouts 4
.IX Item "$ipc->check_timeouts"
This is a no-op on the IPC base class. This is called every loop of
\&\f(CW\*(C`$ipc\->wait\*(C'\fR. If you subclass the IPC class you can fill this in to make
processes timeout if needed.
.ie n .IP $ipc\->check_for_fork 4
.el .IP \f(CW$ipc\fR\->check_for_fork 4
.IX Item "$ipc->check_for_fork"
This is used a lot internally to check if this is a forked process. If this is
a forked process the IPC object is completely reset with no remaining internal
state (except signal handlers).
.ie n .IP "$ipc\->set_proc_exit($proc, @args)" 4
.el .IP "\f(CW$ipc\fR\->set_proc_exit($proc, \f(CW@args\fR)" 4
.IX Item "$ipc->set_proc_exit($proc, @args)"
Calls \f(CW\*(C`$proc\->set_exit(@args)\*(C'\fR. This is called by \f(CW\*(C`$ipc\->wait\*(C'\fR. You
can override it to add custom tasks when a process exits.
.ie n .IP "$int = $ipc\->\fBwait()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$ipc\fR\->\fBwait()\fR" 4
.IX Item "$int = $ipc->wait()"
.PD 0
.ie n .IP "$int = $ipc\->wait(%params)" 4
.el .IP "\f(CW$int\fR = \f(CW$ipc\fR\->wait(%params)" 4
.IX Item "$int = $ipc->wait(%params)"
.PD
Wait on processes, return the number found.
.Sp
Default is non-blocking.
.Sp
Options:
.RS 4
.ie n .IP "timeout => $float" 4
.el .IP "timeout => \f(CW$float\fR" 4
.IX Item "timeout => $float"
If a blocking paremeter is provided this can be used to break the wait after a
timeout. Time::HiRes is used, so timeout is in seconds with decimals.
.ie n .IP "all => $bool" 4
.el .IP "all => \f(CW$bool\fR" 4
.IX Item "all => $bool"
Block until \fBALL\fR processes are done.
.ie n .IP "cat => $category" 4
.el .IP "cat => \f(CW$category\fR" 4
.IX Item "cat => $category"
Block until at least 1 process from the category is complete.
.ie n .IP "all_cat => $category" 4
.el .IP "all_cat => \f(CW$category\fR" 4
.IX Item "all_cat => $category"
Block until \fBALL\fR processes from the category are complete.
.ie n .IP "block => $bool" 4
.el .IP "block => \f(CW$bool\fR" 4
.IX Item "block => $bool"
Block until at least 1 process is complete.
.RE
.RS 4
.RE
.ie n .IP $ipc\->watch($proc) 4
.el .IP \f(CW$ipc\fR\->watch($proc) 4
.IX Item "$ipc->watch($proc)"
Add a process to be monitored.
.ie n .IP "$proc = $ipc\->spawn($proc)" 4
.el .IP "\f(CW$proc\fR = \f(CW$ipc\fR\->spawn($proc)" 4
.IX Item "$proc = $ipc->spawn($proc)"
.PD 0
.ie n .IP "$proc = $ipc\->spawn(%params)" 4
.el .IP "\f(CW$proc\fR = \f(CW$ipc\fR\->spawn(%params)" 4
.IX Item "$proc = $ipc->spawn(%params)"
.PD
In the first form \f(CW$proc\fR is an instance of Test2::Harness::IPC::Proc that
provides \f(CWspawn_params()\fR.
.Sp
In the second form the following params are allowed:
.Sp
Anything supported by \f(CWrun_cmd()\fR in Test2::Harness::Util::IPC.
.RS 4
.ie n .IP "process_class => $CLASS" 4
.el .IP "process_class => \f(CW$CLASS\fR" 4
.IX Item "process_class => $CLASS"
Default is Test2::Harness::IPC::Process.
.ie n .IP "command => $command" 4
.el .IP "command => \f(CW$command\fR" 4
.IX Item "command => $command"
Program command to call. This is required.
.IP "env_vars => { ... }" 4
.IX Item "env_vars => { ... }"
Specify custom environment variables for the new process.
.RE
.RS 4
.RE
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
