.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Command::spawn 3"
.TH App::Yath::Command::spawn 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Yath::Command::spawn \- Launch a perl script from the preloaded environment
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This will launch the specified script from the preloaded yath process.
.PP
NOTE: environment variables are not automatically passed to the spawned
process. You must use \-e or \-E (see help) to specify what environment variables
you care about.
.SH USAGE
.IX Header "USAGE"
.Vb 1
\&    $ yath [YATH OPTIONS] spawn [COMMAND OPTIONS]
.Ve
.SS "YATH OPTIONS"
.IX Subsection "YATH OPTIONS"
\fIDeveloper\fR
.IX Subsection "Developer"
.IP \-\-dev\-lib 4
.IX Item "--dev-lib"
.PD 0
.IP \-\-dev\-lib=lib 4
.IX Item "--dev-lib=lib"
.IP \-D 4
.IX Item "-D"
.IP \-D=lib 4
.IX Item "-D=lib"
.IP \-Dlib 4
.IX Item "-Dlib"
.IP \-\-no\-dev\-lib 4
.IX Item "--no-dev-lib"
.PD
Add paths to \f(CW@INC\fR before loading ANYTHING. This is what you use if you are developing yath or yath plugins to make sure the yath script finds the local code instead of the installed versions of the same code. You can provide an argument (\-Dfoo) to provide a custom path, or you can just use \-D without and arg to add lib, blib/lib and blib/arch.
.Sp
Can be specified multiple times
.PP
\fIEnvironment\fR
.IX Subsection "Environment"
.IP "\-\-persist\-dir ARG" 4
.IX Item "--persist-dir ARG"
.PD 0
.IP \-\-persist\-dir=ARG 4
.IX Item "--persist-dir=ARG"
.IP \-\-no\-persist\-dir 4
.IX Item "--no-persist-dir"
.PD
Where to find persistence files.
.IP "\-\-persist\-file ARG" 4
.IX Item "--persist-file ARG"
.PD 0
.IP \-\-persist\-file=ARG 4
.IX Item "--persist-file=ARG"
.IP "\-\-pfile ARG" 4
.IX Item "--pfile ARG"
.IP \-\-pfile=ARG 4
.IX Item "--pfile=ARG"
.IP \-\-no\-persist\-file 4
.IX Item "--no-persist-file"
.PD
Where to find the persistence file. The default is /{system\-tempdir}/project\-yath\-persist.json. If no project is specified then it will fall back to the current directory. If the current directory is not writable it will default to /tmp/yath\-persist.json which limits you to one persistent runner on your system.
.IP "\-\-project ARG" 4
.IX Item "--project ARG"
.PD 0
.IP \-\-project=ARG 4
.IX Item "--project=ARG"
.IP "\-\-project\-name ARG" 4
.IX Item "--project-name ARG"
.IP \-\-project\-name=ARG 4
.IX Item "--project-name=ARG"
.IP \-\-no\-project 4
.IX Item "--no-project"
.PD
This lets you provide a label for your current project/codebase. This is best used in a .yath.rc file. This is necessary for a persistent runner.
.PP
\fIHelp and Debugging\fR
.IX Subsection "Help and Debugging"
.IP \-\-show\-opts 4
.IX Item "--show-opts"
.PD 0
.IP \-\-no\-show\-opts 4
.IX Item "--no-show-opts"
.PD
Exit after showing what yath thinks your options mean
.IP \-\-version 4
.IX Item "--version"
.PD 0
.IP \-V 4
.IX Item "-V"
.IP \-\-no\-version 4
.IX Item "--no-version"
.PD
Exit after showing a helpful usage message
.PP
\fIPlugins\fR
.IX Subsection "Plugins"
.IP \-\-no\-scan\-plugins 4
.IX Item "--no-scan-plugins"
.PD 0
.IP \-\-no\-no\-scan\-plugins 4
.IX Item "--no-no-scan-plugins"
.PD
Normally yath scans for and loads all App::Yath::Plugin::* modules in order to bring in command-line options they may provide. This flag will disable that. This is useful if you have a naughty plugin that is loading other modules when it should not.
.IP "\-\-plugins PLUGIN" 4
.IX Item "--plugins PLUGIN"
.PD 0
.IP "\-\-plugins +App::Yath::Plugin::PLUGIN" 4
.IX Item "--plugins +App::Yath::Plugin::PLUGIN"
.IP "\-\-plugins PLUGIN=arg1,arg2,..." 4
.IX Item "--plugins PLUGIN=arg1,arg2,..."
.IP "\-\-plugin PLUGIN" 4
.IX Item "--plugin PLUGIN"
.IP "\-\-plugin +App::Yath::Plugin::PLUGIN" 4
.IX Item "--plugin +App::Yath::Plugin::PLUGIN"
.IP "\-\-plugin PLUGIN=arg1,arg2,..." 4
.IX Item "--plugin PLUGIN=arg1,arg2,..."
.IP \-pPLUGIN 4
.IX Item "-pPLUGIN"
.IP \-\-no\-plugins 4
.IX Item "--no-plugins"
.PD
Load a yath plugin.
.Sp
Can be specified multiple times
.SS "COMMAND OPTIONS"
.IX Subsection "COMMAND OPTIONS"
\fICover Options\fR
.IX Subsection "Cover Options"
.IP "\-\-cover\-aggregator ByTest" 4
.IX Item "--cover-aggregator ByTest"
.PD 0
.IP "\-\-cover\-aggregator ByRun" 4
.IX Item "--cover-aggregator ByRun"
.IP "\-\-cover\-aggregator +Custom::Aggregator" 4
.IX Item "--cover-aggregator +Custom::Aggregator"
.IP "\-\-cover\-agg ByTest" 4
.IX Item "--cover-agg ByTest"
.IP "\-\-cover\-agg ByRun" 4
.IX Item "--cover-agg ByRun"
.IP "\-\-cover\-agg +Custom::Aggregator" 4
.IX Item "--cover-agg +Custom::Aggregator"
.IP \-\-no\-cover\-aggregator 4
.IX Item "--no-cover-aggregator"
.PD
Choose a custom aggregator subclass
.IP "\-\-cover\-class ARG" 4
.IX Item "--cover-class ARG"
.PD 0
.IP \-\-cover\-class=ARG 4
.IX Item "--cover-class=ARG"
.IP \-\-no\-cover\-class 4
.IX Item "--no-cover-class"
.PD
Choose a Test2::Plugin::Cover subclass
.IP "\-\-cover\-dirs ARG" 4
.IX Item "--cover-dirs ARG"
.PD 0
.IP \-\-cover\-dirs=ARG 4
.IX Item "--cover-dirs=ARG"
.IP "\-\-cover\-dir ARG" 4
.IX Item "--cover-dir ARG"
.IP \-\-cover\-dir=ARG 4
.IX Item "--cover-dir=ARG"
.IP \-\-no\-cover\-dirs 4
.IX Item "--no-cover-dirs"
.PD
NO DESCRIPTION \- FIX ME
.Sp
Can be specified multiple times
.IP \-\-cover\-exclude\-private 4
.IX Item "--cover-exclude-private"
.PD 0
.IP \-\-no\-cover\-exclude\-private 4
.IX Item "--no-cover-exclude-private"
.IP \-\-cover\-files 4
.IX Item "--cover-files"
.IP \-\-no\-cover\-files 4
.IX Item "--no-cover-files"
.PD
Use Test2::Plugin::Cover to collect coverage data for what files are touched by what tests. Unlike Devel::Cover this has very little performance impact (About 4% difference)
.IP "\-\-cover\-from path/to/log.jsonl" 4
.IX Item "--cover-from path/to/log.jsonl"
.PD 0
.IP "\-\-cover\-from http://example.com/coverage" 4
.IX Item "--cover-from http://example.com/coverage"
.IP "\-\-cover\-from path/to/coverage.jsonl" 4
.IX Item "--cover-from path/to/coverage.jsonl"
.IP \-\-no\-cover\-from 4
.IX Item "--no-cover-from"
.PD
This can be a test log, a coverage dump (old style json or new jsonl format), or a url to any of the previous. Tests will not be run if the file/url is invalid.
.IP "\-\-cover\-from\-type json" 4
.IX Item "--cover-from-type json"
.PD 0
.IP "\-\-cover\-from\-type jsonl" 4
.IX Item "--cover-from-type jsonl"
.IP "\-\-cover\-from\-type log" 4
.IX Item "--cover-from-type log"
.IP \-\-no\-cover\-from\-type 4
.IX Item "--no-cover-from-type"
.PD
File type for coverage source. Usually it can be detected, but when it cannot be you should specify. "json" is old style single-blob coverage data, "jsonl" is the new by-test style, "log" is a logfile from a previous run.
.IP "\-\-cover\-manager My::Coverage::Manager" 4
.IX Item "--cover-manager My::Coverage::Manager"
.PD 0
.IP \-\-no\-cover\-manager 4
.IX Item "--no-cover-manager"
.PD
Coverage 'from' manager to use when coverage data does not provide one
.IP "\-\-cover\-maybe\-from path/to/log.jsonl" 4
.IX Item "--cover-maybe-from path/to/log.jsonl"
.PD 0
.IP "\-\-cover\-maybe\-from http://example.com/coverage" 4
.IX Item "--cover-maybe-from http://example.com/coverage"
.IP "\-\-cover\-maybe\-from path/to/coverage.jsonl" 4
.IX Item "--cover-maybe-from path/to/coverage.jsonl"
.IP \-\-no\-cover\-maybe\-from 4
.IX Item "--no-cover-maybe-from"
.PD
This can be a test log, a coverage dump (old style json or new jsonl format), or a url to any of the previous. Tests will coninue if even if the coverage file/url is invalid.
.IP "\-\-cover\-maybe\-from\-type json" 4
.IX Item "--cover-maybe-from-type json"
.PD 0
.IP "\-\-cover\-maybe\-from\-type jsonl" 4
.IX Item "--cover-maybe-from-type jsonl"
.IP "\-\-cover\-maybe\-from\-type log" 4
.IX Item "--cover-maybe-from-type log"
.IP \-\-no\-cover\-maybe\-from\-type 4
.IX Item "--no-cover-maybe-from-type"
.PD
Same as "from_type" but for "maybe_from". Defaults to "from_type" if that is specified, otherwise auto-detect
.IP \-\-cover\-metrics 4
.IX Item "--cover-metrics"
.PD 0
.IP \-\-no\-cover\-metrics 4
.IX Item "--no-cover-metrics"
.IP "\-\-cover\-types ARG" 4
.IX Item "--cover-types ARG"
.IP \-\-cover\-types=ARG 4
.IX Item "--cover-types=ARG"
.IP "\-\-cover\-type ARG" 4
.IX Item "--cover-type ARG"
.IP \-\-cover\-type=ARG 4
.IX Item "--cover-type=ARG"
.IP \-\-no\-cover\-types 4
.IX Item "--no-cover-types"
.PD
NO DESCRIPTION \- FIX ME
.Sp
Can be specified multiple times
.IP \-\-cover\-write 4
.IX Item "--cover-write"
.PD 0
.IP \-\-cover\-write=coverage.jsonl 4
.IX Item "--cover-write=coverage.jsonl"
.IP \-\-cover\-write=coverage.json 4
.IX Item "--cover-write=coverage.json"
.IP \-\-no\-cover\-write 4
.IX Item "--no-cover-write"
.PD
Create a json or jsonl file of all coverage data seen during the run (This implies \-\-cover\-files).
.PP
\fIGit Options\fR
.IX Subsection "Git Options"
.IP "\-\-git\-change\-base master" 4
.IX Item "--git-change-base master"
.PD 0
.IP "\-\-git\-change\-base HEAD^" 4
.IX Item "--git-change-base HEAD^"
.IP "\-\-git\-change\-base df22abe4" 4
.IX Item "--git-change-base df22abe4"
.IP \-\-no\-git\-change\-base 4
.IX Item "--no-git-change-base"
.PD
Find files changed by all commits in the current branch from most recent stopping when a commit is found that is also present in the history of the branch/commit specified as the change base.
.PP
\fIHelp and Debugging\fR
.IX Subsection "Help and Debugging"
.IP \-\-dummy 4
.IX Item "--dummy"
.PD 0
.IP \-d 4
.IX Item "-d"
.IP \-\-no\-dummy 4
.IX Item "--no-dummy"
.PD
Dummy run, do not actually execute anything
.Sp
Can also be set with the following environment variables: \f(CW\*(C`T2_HARNESS_DUMMY\*(C'\fR
.IP \-\-help 4
.IX Item "--help"
.PD 0
.IP \-h 4
.IX Item "-h"
.IP \-\-no\-help 4
.IX Item "--no-help"
.PD
exit after showing help information
.IP \-\-interactive 4
.IX Item "--interactive"
.PD 0
.IP \-i 4
.IX Item "-i"
.IP \-\-no\-interactive 4
.IX Item "--no-interactive"
.PD
Use interactive mode, 1 test at a time, stdin forwarded to it
.IP \-\-keep\-dirs 4
.IX Item "--keep-dirs"
.PD 0
.IP \-\-keep_dir 4
.IX Item "--keep_dir"
.IP \-k 4
.IX Item "-k"
.IP \-\-no\-keep\-dirs 4
.IX Item "--no-keep-dirs"
.PD
Do not delete directories when done. This is useful if you want to inspect the directories used for various commands.
.IP "\-\-procname\-prefix ARG" 4
.IX Item "--procname-prefix ARG"
.PD 0
.IP \-\-procname\-prefix=ARG 4
.IX Item "--procname-prefix=ARG"
.IP \-\-no\-procname\-prefix 4
.IX Item "--no-procname-prefix"
.PD
Add a prefix to all proc names (as seen by ps).
.PP
\fIYathUI Options\fR
.IX Subsection "YathUI Options"
.IP "\-\-yathui\-api\-key ARG" 4
.IX Item "--yathui-api-key ARG"
.PD 0
.IP \-\-yathui\-api\-key=ARG 4
.IX Item "--yathui-api-key=ARG"
.IP \-\-no\-yathui\-api\-key 4
.IX Item "--no-yathui-api-key"
.PD
Yath-UI API key. This is not necessary if your Yath-UI instance is set to single-user
.IP \-\-yathui\-db 4
.IX Item "--yathui-db"
.PD 0
.IP \-\-no\-yathui\-db 4
.IX Item "--no-yathui-db"
.PD
Add the YathUI DB renderer in addition to other renderers
.IP \-\-yathui\-grace 4
.IX Item "--yathui-grace"
.PD 0
.IP \-\-no\-yathui\-grace 4
.IX Item "--no-yathui-grace"
.PD
If yath cannot connect to yath-ui it normally throws an error, use this to make it fail gracefully. You get a warning, but things keep going.
.IP "\-\-yathui\-long\-duration 10" 4
.IX Item "--yathui-long-duration 10"
.PD 0
.IP \-\-no\-yathui\-long\-duration 4
.IX Item "--no-yathui-long-duration"
.PD
Minimum duration length (seconds) before a test goes from MEDIUM to LONG
.IP "\-\-yathui\-medium\-duration 5" 4
.IX Item "--yathui-medium-duration 5"
.PD 0
.IP \-\-no\-yathui\-medium\-duration 4
.IX Item "--no-yathui-medium-duration"
.PD
Minimum duration length (seconds) before a test goes from SHORT to MEDIUM
.IP "\-\-yathui\-mode summary" 4
.IX Item "--yathui-mode summary"
.PD 0
.IP "\-\-yathui\-mode qvf" 4
.IX Item "--yathui-mode qvf"
.IP "\-\-yathui\-mode qvfd" 4
.IX Item "--yathui-mode qvfd"
.IP "\-\-yathui\-mode complete" 4
.IX Item "--yathui-mode complete"
.IP \-\-no\-yathui\-mode 4
.IX Item "--no-yathui-mode"
.PD
Set the upload mode (default 'qvfd')
.IP \-\-yathui\-only 4
.IX Item "--yathui-only"
.PD 0
.IP \-\-no\-yathui\-only 4
.IX Item "--no-yathui-only"
.PD
Only use the YathUI renderer
.IP \-\-yathui\-only\-db 4
.IX Item "--yathui-only-db"
.PD 0
.IP \-\-no\-yathui\-only\-db 4
.IX Item "--no-yathui-only-db"
.PD
Only use the YathUI DB renderer
.IP "\-\-yathui\-port 8080" 4
.IX Item "--yathui-port 8080"
.PD 0
.IP \-\-no\-yathui\-port 4
.IX Item "--no-yathui-port"
.PD
Port to use when running a local server
.IP "\-\-yathui\-port\-command get_port.sh" 4
.IX Item "--yathui-port-command get_port.sh"
.PD 0
.IP "\-\-yathui\-port\-command get_port.sh \-\-pid $$" 4
.IX Item "--yathui-port-command get_port.sh --pid $$"
.IP \-\-no\-yathui\-port\-command 4
.IX Item "--no-yathui-port-command"
.PD
Use a command to get a port number. "$$" will be replaced with the PID of the yath process
.IP "\-\-yathui\-project ARG" 4
.IX Item "--yathui-project ARG"
.PD 0
.IP \-\-yathui\-project=ARG 4
.IX Item "--yathui-project=ARG"
.IP \-\-no\-yathui\-project 4
.IX Item "--no-yathui-project"
.PD
The Yath-UI project for your test results
.IP \-\-yathui\-render 4
.IX Item "--yathui-render"
.PD 0
.IP \-\-no\-yathui\-render 4
.IX Item "--no-yathui-render"
.PD
Add the YathUI renderer in addition to other renderers
.IP \-\-yathui\-resources 4
.IX Item "--yathui-resources"
.PD 0
.IP \-\-yathui\-resources=5 4
.IX Item "--yathui-resources=5"
.IP \-\-no\-yathui\-resources 4
.IX Item "--no-yathui-resources"
.PD
Send resource info (for supported resources) to yathui at the specified interval in seconds (5 if not specified)
.IP \-\-yathui\-retry 4
.IX Item "--yathui-retry"
.PD 0
.IP \-\-no\-yathui\-retry 4
.IX Item "--no-yathui-retry"
.PD
How many times to try an operation before giving up
.Sp
Can be specified multiple times
.IP "\-\-yathui\-schema PostgreSQL" 4
.IX Item "--yathui-schema PostgreSQL"
.PD 0
.IP "\-\-yathui\-schema MySQL" 4
.IX Item "--yathui-schema MySQL"
.IP "\-\-yathui\-schema MySQL56" 4
.IX Item "--yathui-schema MySQL56"
.IP \-\-no\-yathui\-schema 4
.IX Item "--no-yathui-schema"
.PD
What type of DB/schema to use when using a temporary database
.IP "\-\-yathui\-url http://my\-yath\-ui.com/..." 4
.IX Item "--yathui-url http://my-yath-ui.com/..."
.PD 0
.IP "\-\-uri http://my\-yath\-ui.com/..." 4
.IX Item "--uri http://my-yath-ui.com/..."
.IP \-\-no\-yathui\-url 4
.IX Item "--no-yathui-url"
.PD
Yath-UI url
.IP "\-\-yathui\-user ARG" 4
.IX Item "--yathui-user ARG"
.PD 0
.IP \-\-yathui\-user=ARG 4
.IX Item "--yathui-user=ARG"
.IP \-\-no\-yathui\-user 4
.IX Item "--no-yathui-user"
.PD
Username to attach to the data sent to the db
.IP "\-\-yathui\-db\-buffering none" 4
.IX Item "--yathui-db-buffering none"
.PD 0
.IP "\-\-yathui\-db\-buffering job" 4
.IX Item "--yathui-db-buffering job"
.IP "\-\-yathui\-db\-buffering diag" 4
.IX Item "--yathui-db-buffering diag"
.IP "\-\-yathui\-db\-buffering run" 4
.IX Item "--yathui-db-buffering run"
.IP \-\-no\-yathui\-db\-buffering 4
.IX Item "--no-yathui-db-buffering"
.PD
Type of buffering to use, if "none" then events are written to the db one at a time, which is SLOW
.IP "\-\-yathui\-db\-config ARG" 4
.IX Item "--yathui-db-config ARG"
.PD 0
.IP \-\-yathui\-db\-config=ARG 4
.IX Item "--yathui-db-config=ARG"
.IP \-\-no\-yathui\-db\-config 4
.IX Item "--no-yathui-db-config"
.PD
Module that implements 'MODULE\->yath_ui_config(%params)' which should return a Test2::Harness::UI::Config instance.
.IP \-\-yathui\-db\-coverage 4
.IX Item "--yathui-db-coverage"
.PD 0
.IP \-\-no\-yathui\-db\-coverage 4
.IX Item "--no-yathui-db-coverage"
.PD
Pull coverage data directly from the database (default: off)
.IP "\-\-yathui\-db\-driver Pg" 4
.IX Item "--yathui-db-driver Pg"
.PD 0
.IP \-\-yathui\-db\-drivermysql 4
.IX Item "--yathui-db-drivermysql"
.IP \-\-yathui\-db\-driverMariaDB 4
.IX Item "--yathui-db-driverMariaDB"
.IP \-\-no\-yathui\-db\-driver 4
.IX Item "--no-yathui-db-driver"
.PD
DBI Driver to use
.IP "\-\-yathui\-db\-dsn ARG" 4
.IX Item "--yathui-db-dsn ARG"
.PD 0
.IP \-\-yathui\-db\-dsn=ARG 4
.IX Item "--yathui-db-dsn=ARG"
.IP \-\-no\-yathui\-db\-dsn 4
.IX Item "--no-yathui-db-dsn"
.PD
DSN to use when connecting to the db
.IP "\-\-yathui\-db\-duration\-limit ARG" 4
.IX Item "--yathui-db-duration-limit ARG"
.PD 0
.IP \-\-yathui\-db\-duration\-limit=ARG 4
.IX Item "--yathui-db-duration-limit=ARG"
.IP \-\-no\-yathui\-db\-duration\-limit 4
.IX Item "--no-yathui-db-duration-limit"
.PD
Limit the number of runs to look at for durations data (default: 10)
.IP \-\-yathui\-db\-durations 4
.IX Item "--yathui-db-durations"
.PD 0
.IP \-\-no\-yathui\-db\-durations 4
.IX Item "--no-yathui-db-durations"
.PD
Pull duration data directly from the database (default: off)
.IP "\-\-yathui\-db\-flush\-interval 2" 4
.IX Item "--yathui-db-flush-interval 2"
.PD 0
.IP "\-\-yathui\-db\-flush\-interval 1.5" 4
.IX Item "--yathui-db-flush-interval 1.5"
.IP \-\-no\-yathui\-db\-flush\-interval 4
.IX Item "--no-yathui-db-flush-interval"
.PD
When buffering DB writes, force a flush when an event is recieved at least N seconds after the last flush.
.IP "\-\-yathui\-db\-host ARG" 4
.IX Item "--yathui-db-host ARG"
.PD 0
.IP \-\-yathui\-db\-host=ARG 4
.IX Item "--yathui-db-host=ARG"
.IP \-\-no\-yathui\-db\-host 4
.IX Item "--no-yathui-db-host"
.PD
hostname to use when connecting to the db
.IP "\-\-yathui\-db\-name ARG" 4
.IX Item "--yathui-db-name ARG"
.PD 0
.IP \-\-yathui\-db\-name=ARG 4
.IX Item "--yathui-db-name=ARG"
.IP \-\-no\-yathui\-db\-name 4
.IX Item "--no-yathui-db-name"
.PD
Name of the database to use for yathui
.IP "\-\-yathui\-db\-pass ARG" 4
.IX Item "--yathui-db-pass ARG"
.PD 0
.IP \-\-yathui\-db\-pass=ARG 4
.IX Item "--yathui-db-pass=ARG"
.IP \-\-no\-yathui\-db\-pass 4
.IX Item "--no-yathui-db-pass"
.PD
Password to use when connecting to the db
.IP "\-\-yathui\-db\-port ARG" 4
.IX Item "--yathui-db-port ARG"
.PD 0
.IP \-\-yathui\-db\-port=ARG 4
.IX Item "--yathui-db-port=ARG"
.IP \-\-no\-yathui\-db\-port 4
.IX Item "--no-yathui-db-port"
.PD
port to use when connecting to the db
.IP "\-\-yathui\-db\-publisher ARG" 4
.IX Item "--yathui-db-publisher ARG"
.PD 0
.IP \-\-yathui\-db\-publisher=ARG 4
.IX Item "--yathui-db-publisher=ARG"
.IP \-\-no\-yathui\-db\-publisher 4
.IX Item "--no-yathui-db-publisher"
.PD
When using coverage or duration data, only use data uploaded by this user
.IP "\-\-yathui\-db\-socket ARG" 4
.IX Item "--yathui-db-socket ARG"
.PD 0
.IP \-\-yathui\-db\-socket=ARG 4
.IX Item "--yathui-db-socket=ARG"
.IP \-\-no\-yathui\-db\-socket 4
.IX Item "--no-yathui-db-socket"
.PD
socket to use when connecting to the db
.IP "\-\-yathui\-db\-user ARG" 4
.IX Item "--yathui-db-user ARG"
.PD 0
.IP \-\-yathui\-db\-user=ARG 4
.IX Item "--yathui-db-user=ARG"
.IP \-\-no\-yathui\-db\-user 4
.IX Item "--no-yathui-db-user"
.PD
Username to use when connecting to the db
.PP
\fIspawn options\fR
.IX Subsection "spawn options"
.IP "\-\-copy\-env HOME" 4
.IX Item "--copy-env HOME"
.PD 0
.IP "\-\-copy\-env SHELL" 4
.IX Item "--copy-env SHELL"
.IP "\-\-copy\-env /PERL_.*/i" 4
.IX Item "--copy-env /PERL_.*/i"
.IP "\-e HOME" 4
.IX Item "-e HOME"
.IP "\-e SHELL" 4
.IX Item "-e SHELL"
.IP "\-e /PERL_.*/i" 4
.IX Item "-e /PERL_.*/i"
.IP \-\-no\-copy\-env 4
.IX Item "--no-copy-env"
.PD
Specify environment variables to pass along with their current values, can also use a regex
.Sp
Can be specified multiple times
.IP "\-\-env\-var VAR=VAL" 4
.IX Item "--env-var VAR=VAL"
.PD 0
.IP \-EVAR=VAL 4
.IX Item "-EVAR=VAL"
.IP "\-E VAR=VAL" 4
.IX Item "-E VAR=VAL"
.IP \-\-no\-env\-var 4
.IX Item "--no-env-var"
.PD
Set environment variables for the spawn
.Sp
Can be specified multiple times
.IP "\-\-stage foo" 4
.IX Item "--stage foo"
.PD 0
.IP "\-s foo" 4
.IX Item "-s foo"
.IP \-\-no\-stage 4
.IX Item "--no-stage"
.PD
Specify the stage to be used for launching the script
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2023 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
