.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Options::Runner 3"
.TH App::Yath::Options::Runner 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Yath::Options::Runner \- Runner options for Yath.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is where command line options for the runner are defined.
.SH "PROVIDED OPTIONS"
.IX Header "PROVIDED OPTIONS"
.SS "COMMAND OPTIONS"
.IX Subsection "COMMAND OPTIONS"
\fIRunner Options\fR
.IX Subsection "Runner Options"
.IP \-\-abort\-on\-bail 4
.IX Item "--abort-on-bail"
.PD 0
.IP \-\-no\-abort\-on\-bail 4
.IX Item "--no-abort-on-bail"
.PD
Abort all testing if a bail-out is encountered (default: on)
.IP \-\-blib 4
.IX Item "--blib"
.PD 0
.IP \-b 4
.IX Item "-b"
.IP \-\-no\-blib 4
.IX Item "--no-blib"
.PD
(Default: include if it exists) Include 'blib/lib' and 'blib/arch' in your module path
.IP \-\-cover 4
.IX Item "--cover"
.PD 0
.IP \-\-cover=\-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl 4
.IX Item "--cover=-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl"
.IP \-\-no\-cover 4
.IX Item "--no-cover"
.PD
Use Devel::Cover to calculate test coverage. This disables forking. If no args are specified the following are used: \-silent,1,+ignore,^t/,+ignore,^t2/,+ignore,^xt,+ignore,^test.pl
.IP \-\-dump\-depmap 4
.IX Item "--dump-depmap"
.PD 0
.IP \-\-no\-dump\-depmap 4
.IX Item "--no-dump-depmap"
.PD
When using staged preload, dump the depmap for each stage as json files
.IP "\-\-event\-timeout SECONDS" 4
.IX Item "--event-timeout SECONDS"
.PD 0
.IP "\-\-et SECONDS" 4
.IX Item "--et SECONDS"
.IP \-\-no\-event\-timeout 4
.IX Item "--no-event-timeout"
.PD
Kill test if no output is received within timeout period. (Default: 60 seconds). Add the "# HARNESS-NO-TIMEOUT" comment to the top of a test file to disable timeouts on a per-test basis. This prevents a hung test from running forever.
.IP "\-\-include ARG" 4
.IX Item "--include ARG"
.PD 0
.IP \-\-include=ARG 4
.IX Item "--include=ARG"
.IP "\-I ARG" 4
.IX Item "-I ARG"
.IP \-I=ARG 4
.IX Item "-I=ARG"
.IP \-\-no\-include 4
.IX Item "--no-include"
.PD
Add a directory to your include paths
.Sp
Can be specified multiple times
.IP "\-\-job\-count 4" 4
.IX Item "--job-count 4"
.PD 0
.IP "\-\-job\-count 8:2" 4
.IX Item "--job-count 8:2"
.IP "\-\-jobs 4" 4
.IX Item "--jobs 4"
.IP "\-\-jobs 8:2" 4
.IX Item "--jobs 8:2"
.IP \-j4 4
.IX Item "-j4"
.IP \-j8:2 4
.IX Item "-j8:2"
.IP \-\-no\-job\-count 4
.IX Item "--no-job-count"
.PD
Set the number of concurrent jobs to run. Add a :# if you also wish to designate multiple slots per test. 8:2 means 8 slots, but each test gets 2 slots, so 4 tests run concurrently. Tests can find their concurrency assignemnt in the "T2_HARNESS_MY_JOB_CONCURRENCY" environment variable.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`YATH_JOB_COUNT\*(C'\fR, \f(CW\*(C`T2_HARNESS_JOB_COUNT\*(C'\fR, \f(CW\*(C`HARNESS_JOB_COUNT\*(C'\fR
.IP \-\-lib 4
.IX Item "--lib"
.PD 0
.IP \-l 4
.IX Item "-l"
.IP \-\-no\-lib 4
.IX Item "--no-lib"
.PD
(Default: include if it exists) Include 'lib' in your module path
.IP \-\-nytprof 4
.IX Item "--nytprof"
.PD 0
.IP \-\-no\-nytprof 4
.IX Item "--no-nytprof"
.PD
Use Devel::NYTProf on tests. This will set addpid=1 for you. This works with or without fork.
.IP "\-\-post\-exit\-timeout SECONDS" 4
.IX Item "--post-exit-timeout SECONDS"
.PD 0
.IP "\-\-pet SECONDS" 4
.IX Item "--pet SECONDS"
.IP \-\-no\-post\-exit\-timeout 4
.IX Item "--no-post-exit-timeout"
.PD
Stop waiting post-exit after the timeout period. (Default: 15 seconds) Some tests fork and allow the parent to exit before writing all their output. If Test2::Harness detects an incomplete plan after the test exits it will monitor for more events until the timeout period. Add the "# HARNESS-NO-TIMEOUT" comment to the top of a test file to disable timeouts on a per-test basis.
.IP "\-\-preload\-threshold ARG" 4
.IX Item "--preload-threshold ARG"
.PD 0
.IP \-\-preload\-threshold=ARG 4
.IX Item "--preload-threshold=ARG"
.IP "\-\-Pt ARG" 4
.IX Item "--Pt ARG"
.IP \-\-Pt=ARG 4
.IX Item "--Pt=ARG"
.IP "\-W ARG" 4
.IX Item "-W ARG"
.IP \-W=ARG 4
.IX Item "-W=ARG"
.IP \-\-no\-preload\-threshold 4
.IX Item "--no-preload-threshold"
.PD
Only do preload if at least N tests are going to be run. In some cases a full preload takes longer than simply running the tests, this lets you specify a minimum number of test jobs that will be run for preload to happen. This has no effect for a persistent runner. The default is 0, and it means always preload.
.IP "\-\-preloads ARG" 4
.IX Item "--preloads ARG"
.PD 0
.IP \-\-preloads=ARG 4
.IX Item "--preloads=ARG"
.IP "\-\-preload ARG" 4
.IX Item "--preload ARG"
.IP \-\-preload=ARG 4
.IX Item "--preload=ARG"
.IP "\-P ARG" 4
.IX Item "-P ARG"
.IP \-P=ARG 4
.IX Item "-P=ARG"
.IP \-\-no\-preloads 4
.IX Item "--no-preloads"
.PD
Preload a module before running tests
.Sp
Can be specified multiple times
.IP "\-\-resource Port" 4
.IX Item "--resource Port"
.PD 0
.IP "\-\-resource +Test2::Harness::Runner::Resource::Port" 4
.IX Item "--resource +Test2::Harness::Runner::Resource::Port"
.IP "\-R Port" 4
.IX Item "-R Port"
.IP \-\-no\-resource 4
.IX Item "--no-resource"
.PD
Use a resource module to assign resource assignments to individual tests
.Sp
Can be specified multiple times
.IP "\-\-runner\-id ARG" 4
.IX Item "--runner-id ARG"
.PD 0
.IP \-\-runner\-id=ARG 4
.IX Item "--runner-id=ARG"
.IP \-\-no\-runner\-id 4
.IX Item "--no-runner-id"
.PD
Runner ID (usually a generated uuid)
.IP "\-\-shared\-jobs\-config .sharedjobslots.yml" 4
.IX Item "--shared-jobs-config .sharedjobslots.yml"
.PD 0
.IP "\-\-shared\-jobs\-config relative/path/.sharedjobslots.yml" 4
.IX Item "--shared-jobs-config relative/path/.sharedjobslots.yml"
.IP "\-\-shared\-jobs\-config /absolute/path/.sharedjobslots.yml" 4
.IX Item "--shared-jobs-config /absolute/path/.sharedjobslots.yml"
.IP \-\-no\-shared\-jobs\-config 4
.IX Item "--no-shared-jobs-config"
.PD
Where to look for a shared slot config file. If a filename with no path is provided yath will search the current and all parent directories for the name.
.IP "\-\-slots\-per\-job 2" 4
.IX Item "--slots-per-job 2"
.PD 0
.IP \-x2 4
.IX Item "-x2"
.IP \-\-no\-slots\-per\-job 4
.IX Item "--no-slots-per-job"
.PD
This sets the number of slots each job will use (default 1). This is normally set by the ':#' in '\-j#:#'.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`T2_HARNESS_JOB_CONCURRENCY\*(C'\fR
.IP "\-\-switch ARG" 4
.IX Item "--switch ARG"
.PD 0
.IP \-\-switch=ARG 4
.IX Item "--switch=ARG"
.IP "\-S ARG" 4
.IX Item "-S ARG"
.IP \-S=ARG 4
.IX Item "-S=ARG"
.IP \-\-no\-switch 4
.IX Item "--no-switch"
.PD
Pass the specified switch to perl for each test. This is not compatible with preload.
.Sp
Can be specified multiple times
.IP \-\-tlib 4
.IX Item "--tlib"
.PD 0
.IP \-\-no\-tlib 4
.IX Item "--no-tlib"
.PD
(Default: off) Include 't/lib' in your module path
.IP \-\-unsafe\-inc 4
.IX Item "--unsafe-inc"
.PD 0
.IP \-\-no\-unsafe\-inc 4
.IX Item "--no-unsafe-inc"
.PD
perl is removing '.' from \f(CW@INC\fR as a security concern. This option keeps things from breaking for now.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`PERL_USE_UNSAFE_INC\*(C'\fR
.IP \-\-use\-fork 4
.IX Item "--use-fork"
.PD 0
.IP \-\-fork 4
.IX Item "--fork"
.IP \-\-no\-use\-fork 4
.IX Item "--no-use-fork"
.PD
(default: on, except on windows) Normally tests are run by forking, which allows for features like preloading. This will turn off the behavior globally (which is not compatible with preloading). This is slower, it is better to tag misbehaving tests with the '# HARNESS\-NO\-PRELOAD' comment in their header to disable forking only for those tests.
.Sp
Can also be set with the following environment variables: \f(CW\*(C`!T2_NO_FORK\*(C'\fR, \f(CW\*(C`T2_HARNESS_FORK\*(C'\fR, \f(CW\*(C`!T2_HARNESS_NO_FORK\*(C'\fR, \f(CW\*(C`YATH_FORK\*(C'\fR, \f(CW\*(C`!YATH_NO_FORK\*(C'\fR
.IP \-\-use\-timeout 4
.IX Item "--use-timeout"
.PD 0
.IP \-\-timeout 4
.IX Item "--timeout"
.IP \-\-no\-use\-timeout 4
.IX Item "--no-use-timeout"
.PD
(default: on) Enable/disable timeouts
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
