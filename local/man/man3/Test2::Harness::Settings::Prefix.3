.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Settings::Prefix 3"
.TH Test2::Harness::Settings::Prefix 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Settings::Prefix \- Abstraction of a settings category, aka prefix.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class represents a settings category (prefix).
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&    # You will rarely if ever need to construct settings yourself, usually a
\&    # component of Test2::Harness will expose them to you.
\&    my $settings = $thing\->settings;
\&    my $display = $settings\->display;
\&
\&    # Once you have your prefix you can read data from it:
\&    my $verbose = $display\->verbose;
\&
\&    # If you dislike autoload methods you can use the \*(Aqfield\*(Aq method:
\&    my $verbose = $display\->field(\*(Aqverbose\*(Aq);
\&
\&    # You can also change values:
\&    $display\->field(verbose => 1);
\&
\&    # You can also use the autoloaded method as an lvalue, but this breaks on
\&    # perls older than 5.16, so it is not used internally, and you should only
\&    # use it if you know you will never need an older perl:
\&    $display\->verbose = 1;
.Ve
.SH METHODS
.IX Header "METHODS"
Note that any field that does not conflict with the predefined methods can be
accessed via AUTOLOAD generating the methods as needed.
.ie n .IP "$scalar_ref = $prefix\->vivify_field($field_name)" 4
.el .IP "\f(CW$scalar_ref\fR = \f(CW$prefix\fR\->vivify_field($field_name)" 4
.IX Item "$scalar_ref = $prefix->vivify_field($field_name)"
This will force a field into existance. It returns a scalar reference to the
field which can be used to set the value:
.Sp
.Vb 2
\&    my $vref = $display\->vivify_field(\*(Aqverbose\*(Aq);    # Create or find field
\&    ${$vref} = 1;                                    # set verbosity to 1
.Ve
.ie n .IP "$bool = $prefix\->check_field($field_name)" 4
.el .IP "\f(CW$bool\fR = \f(CW$prefix\fR\->check_field($field_name)" 4
.IX Item "$bool = $prefix->check_field($field_name)"
Check if a field is defined or not.
.ie n .IP "$val = $prefix\->field($field_name)" 4
.el .IP "\f(CW$val\fR = \f(CW$prefix\fR\->field($field_name)" 4
.IX Item "$val = $prefix->field($field_name)"
.PD 0
.ie n .IP "$val = $prefix\->$field_name" 4
.el .IP "\f(CW$val\fR = \f(CW$prefix\fR\->$field_name" 4
.IX Item "$val = $prefix->$field_name"
.ie n .IP "$prefix\->field($field_name, $val)" 4
.el .IP "\f(CW$prefix\fR\->field($field_name, \f(CW$val\fR)" 4
.IX Item "$prefix->field($field_name, $val)"
.ie n .IP "$prefix\->$field_name = $val" 4
.el .IP "\f(CW$prefix\fR\->$field_name = \f(CW$val\fR" 4
.IX Item "$prefix->$field_name = $val"
.PD
Retrieve or set the value of the specified field. This will throw an exception
if the field does not exist.
.Sp
\&\fBNote\fR: The lvalue form \f(CW\*(C`$prefix\->$field_name = $val\*(C'\fR breaks on perls
older then 5.16.
.ie n .IP "$thing = $prefix\->build($class, @args)" 4
.el .IP "\f(CW$thing\fR = \f(CW$prefix\fR\->build($class, \f(CW@args\fR)" 4
.IX Item "$thing = $prefix->build($class, @args)"
This will create an instance of \f(CW$class\fR passing the key/value pairs from the
prefix as arguments. Additional arguments can be provided in \f(CW@args\fR.
.ie n .IP "$hashref = $prefix\->\fBTO_JSON()\fR" 4
.el .IP "\f(CW$hashref\fR = \f(CW$prefix\fR\->\fBTO_JSON()\fR" 4
.IX Item "$hashref = $prefix->TO_JSON()"
This method allows settings to be serialized into JSON.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
