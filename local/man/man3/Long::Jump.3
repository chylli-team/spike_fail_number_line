.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Long::Jump 3"
.TH Long::Jump 3 2019-09-29 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Long::Jump \- Mechanism for returning to a specific point from a deeply nested
stack.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module essentially provides a multi-level return. You can mark a spot with
\&\f(CWsetjump()\fR and then unwind the stack back to that point from any nested stack
frame by name using \f(CWlongjump()\fR. You can also provide a list of return
values.
.PP
This is not quite a match for C's long jump, but it is "close enough". It is
safer than C's jump in that it only lets you escape frames by going up the
stack, you cannot jump in other ways.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Long::Jump qw/setjump longjump/;
\&
\&    my $out = setjump foo => sub {
\&        bar();
\&        ...; # Will never get here
\&    };
\&    is($out, [qw/x y z/], "Got results of the long jump");
\&
\&    $out = setjump foo => sub {
\&        print "Not calling longjump";
\&    };
\&    is($out, undef, "longjump was not called so we got an undef response");
\&
\&    sub bar {
\&        baz();
\&        return \*(Aqbar\*(Aq; # Will never get here
\&    }
\&
\&    sub baz {
\&        bat();
\&        return \*(Aqbaz\*(Aq; # Will never get here
\&    }
\&
\&    sub bat {
\&        my @out = qw/x y z/;
\&        longjump foo => @out;
\&
\&        return \*(Aqbat\*(Aq; # Will never get here
\&    }
.Ve
.SH EXPORTS
.IX Header "EXPORTS"
.ie n .IP "$out = setjump($NAME, sub { ... })" 4
.el .IP "\f(CW$out\fR = setjump($NAME, sub { ... })" 4
.IX Item "$out = setjump($NAME, sub { ... })"
.PD 0
.ie n .IP "$out = setjump $NAME, sub { ... }" 4
.el .IP "\f(CW$out\fR = setjump \f(CW$NAME\fR, sub { ... }" 4
.IX Item "$out = setjump $NAME, sub { ... }"
.ie n .IP "$out = setjump($NAME => sub { ... })" 4
.el .IP "\f(CW$out\fR = setjump($NAME => sub { ... })" 4
.IX Item "$out = setjump($NAME => sub { ... })"
.ie n .IP "$out = setjump $NAME => sub { ... }" 4
.el .IP "\f(CW$out\fR = setjump \f(CW$NAME\fR => sub { ... }" 4
.IX Item "$out = setjump $NAME => sub { ... }"
.PD
Set a named point to which you will return when calling \f(CWlongjump()\fR. \f(CW$out\fR
will be \f(CW\*(C`undef\*(C'\fR if \f(CWlongjump()\fR was not called. \f(CW$out\fR will be an arrayref
if \f(CWlongjump()\fR was called. The \f(CW$out\fR arrayref will be empty, but present if
\&\f(CWlongjump()\fR is called without any return values.
.Sp
The return value will always be false if \f(CW\*(C`longjump\*(C'\fR was not called, and will
always be true if it was called.
.Sp
You cannot nest multiple jump points with the same name, but you can nest
multiple jump points if they have unqiue names. \f(CWlongjump()\fR will always jump
to the correct name.
.IP longjump($NAME) 4
.IX Item "longjump($NAME)"
.PD 0
.ie n .IP "longjump $NAME" 4
.el .IP "longjump \f(CW$NAME\fR" 4
.IX Item "longjump $NAME"
.ie n .IP "longjump($NAME, @RETURN_LIST)" 4
.el .IP "longjump($NAME, \f(CW@RETURN_LIST\fR)" 4
.IX Item "longjump($NAME, @RETURN_LIST)"
.ie n .IP "longjump($NAME => @RETURN_LIST)" 4
.el .IP "longjump($NAME => \f(CW@RETURN_LIST\fR)" 4
.IX Item "longjump($NAME => @RETURN_LIST)"
.ie n .IP "longjump $NAME => @RETURN_LIST" 4
.el .IP "longjump \f(CW$NAME\fR => \f(CW@RETURN_LIST\fR" 4
.IX Item "longjump $NAME => @RETURN_LIST"
.PD
Jump to the named point, optionally with values to return. This will throw
exceptions if you use an invalid \f(CW$NAME\fR, which includes the case of calling
it without a set jump point.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Long-Jump can be found at
\&\fIhttps://github.com/exodist/Long\-Jump/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
