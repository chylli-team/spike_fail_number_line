.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Runner::Job 3"
.TH Test2::Harness::Runner::Job 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Runner::Job \- Representation of a test job.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module takes all the data from a test file queue item, a run, and runner
settings, and mashes them together to figure out what is actually needed to run
a job.
.SH METHODS
.IX Header "METHODS"
Note, this object subclasses Test2::Harness::IPC::Process.
.ie n .IP "$arrayref = $job\->args" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$job\fR\->args" 4
.IX Item "$arrayref = $job->args"
Get the arguments for the test either formt he queue item, or from the run.
.ie n .IP "$path = $job\->bail_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->bail_file" 4
.IX Item "$path = $job->bail_file"
Path to the events-file used in case of a bail-out
.ie n .IP "$bool = $job\->bailed_out" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->bailed_out" 4
.IX Item "$bool = $job->bailed_out"
True if the test job bailed out.
.ie n .IP "$cat $job\->category" 4
.el .IP "\f(CW$cat\fR \f(CW$job\fR\->category" 4
.IX Item "$cat $job->category"
Process category, always 'job' unless overriden in a subclass.
.ie n .IP "$path = $job\->ch_dir" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->ch_dir" 4
.IX Item "$path = $job->ch_dir"
If this job first requires a change in directory before running, this will
return the path.
.ie n .IP "@list = $job\->cli_includes" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->cli_includes" 4
.IX Item "@list = $job->cli_includes"
List of includes for a command line launch of this job.
.ie n .IP "@list = $job\->cli_options" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->cli_options" 4
.IX Item "@list = $job->cli_options"
List of options for a command line launch of this job.
.ie n .IP "$hashref = $job\->env_vars" 4
.el .IP "\f(CW$hashref\fR = \f(CW$job\fR\->env_vars" 4
.IX Item "$hashref = $job->env_vars"
Get environment variables to set when launching this job.
.ie n .IP "$path = $job\->out_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->out_file" 4
.IX Item "$path = $job->out_file"
File to which all STDOUT for the job will be written.
.ie n .IP "$path = $job\->err_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->err_file" 4
.IX Item "$path = $job->err_file"
File to which all STDERR for the job will be written.
.ie n .IP "$path = $job\->et_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->et_file" 4
.IX Item "$path = $job->et_file"
File to which event timeout notifications will be written.
.ie n .IP "$path = $job\->pet_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->pet_file" 4
.IX Item "$path = $job->pet_file"
File to which post exit timeout events will be written.
.ie n .IP "$path = $job\->event_dir" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->event_dir" 4
.IX Item "$path = $job->event_dir"
Directory to which Test2::Formatter::Stream events will be written.
.ie n .IP "$time = $job\->event_timeout" 4
.el .IP "\f(CW$time\fR = \f(CW$job\fR\->event_timeout" 4
.IX Item "$time = $job->event_timeout"
Event timeout specification, if any, first from test queue item, then from
runner.
.ie n .IP "$time = $job\->post_exit_timeout" 4
.el .IP "\f(CW$time\fR = \f(CW$job\fR\->post_exit_timeout" 4
.IX Item "$time = $job->post_exit_timeout"
Post exit timeout specification, if any, first from test queue item, then from
runner.
.ie n .IP "$bool = $job\->event_uuids" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->event_uuids" 4
.IX Item "$bool = $job->event_uuids"
Use Test2::Plugin::UUID inside the test.
.ie n .IP "$path = $job\->file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->file" 4
.IX Item "$path = $job->file"
Test file the job will be running.
.ie n .IP "$coderef = $job\->fork_callback" 4
.el .IP "\f(CW$coderef\fR = \f(CW$job\fR\->fork_callback" 4
.IX Item "$coderef = $job->fork_callback"
If the job is to be launched via fork, use this callback.
.ie n .IP "$path = $job\->in_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->in_file" 4
.IX Item "$path = $job->in_file"
File containing STDIN to be provided to the test.
.ie n .IP "@list = $job\->includes" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->includes" 4
.IX Item "@list = $job->includes"
Paths to add to \f(CW@INC\fR for the test.
.ie n .IP "$bool = $job\->io_events" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->io_events" 4
.IX Item "$bool = $job->io_events"
True if Test2::Plugin::IOEvents should be used.
.ie n .IP "$int = $job\->is_try" 4
.el .IP "\f(CW$int\fR = \f(CW$job\fR\->is_try" 4
.IX Item "$int = $job->is_try"
This starts at 0 and will be incremented for every retry of the job.
.ie n .IP "$path = $job\->job_dir" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->job_dir" 4
.IX Item "$path = $job->job_dir"
Temporary directory housing all files related to this job when it runs.
.ie n .IP "$uuid = $job\->job_id" 4
.el .IP "\f(CW$uuid\fR = \f(CW$job\fR\->job_id" 4
.IX Item "$uuid = $job->job_id"
UUID for this job.
.ie n .IP "@list = $job\->load" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->load" 4
.IX Item "@list = $job->load"
Modules to load when starting this job.
.ie n .IP "@list = $job\->load_import" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->load_import" 4
.IX Item "@list = $job->load_import"
Modules to load and import when starting this job.
.ie n .IP "$bool = $job\->mem_usage" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->mem_usage" 4
.IX Item "$bool = $job->mem_usage"
True if the Test2::Plugin::MemUsage plugin should be used.
.ie n .IP "$path = $job\->run_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->run_file" 4
.IX Item "$path = $job->run_file"
Usually the same as rel_file, but you can specify an alternative file to
actually run.
.ie n .IP "$path = $job\->rel_file" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->rel_file" 4
.IX Item "$path = $job->rel_file"
Relative path to the file.
.ie n .IP "$int = $job\->retry" 4
.el .IP "\f(CW$int\fR = \f(CW$job\fR\->retry" 4
.IX Item "$int = $job->retry"
How many times the test should be retried if it fails.
.ie n .IP "$bool = $job\->retry_isolated" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->retry_isolated" 4
.IX Item "$bool = $job->retry_isolated"
True if the test should be retried in isolation if it fails.
.ie n .IP "$run = $job\->run" 4
.el .IP "\f(CW$run\fR = \f(CW$job\fR\->run" 4
.IX Item "$run = $job->run"
The Test2::Harness::Runner::Run instance.
.ie n .IP "$path = $job\->run_dir" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->run_dir" 4
.IX Item "$path = $job->run_dir"
Path to the temporary directory housing all the data about the run.
.ie n .IP "$runner = $job\->runner" 4
.el .IP "\f(CW$runner\fR = \f(CW$job\fR\->runner" 4
.IX Item "$runner = $job->runner"
The Test2::Harness::Runner instance.
.ie n .IP "@list = $job\->runner_includes" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->runner_includes" 4
.IX Item "@list = $job->runner_includes"
Search path includes provided directly by the runner.
.ie n .IP "$settings = $job\->settings" 4
.el .IP "\f(CW$settings\fR = \f(CW$job\fR\->settings" 4
.IX Item "$settings = $job->settings"
The Test2::Harness::Settings instance.
.ie n .IP "$bool = $job\->smoke" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->smoke" 4
.IX Item "$bool = $job->smoke"
True if the test is a priority smoke test.
.ie n .IP "$hashref = $job\->spawn_params" 4
.el .IP "\f(CW$hashref\fR = \f(CW$job\fR\->spawn_params" 4
.IX Item "$hashref = $job->spawn_params"
Parameters for \f(CWrun_cmd()\fR in Test2::Harness::Util::IPC when launching this
job.
.ie n .IP "@list = $job\->switches" 4
.el .IP "\f(CW@list\fR = \f(CW$job\fR\->switches" 4
.IX Item "@list = $job->switches"
Command line switches for perl when running this test.
.ie n .IP "$hashref = $job\->task" 4
.el .IP "\f(CW$hashref\fR = \f(CW$job\fR\->task" 4
.IX Item "$hashref = $job->task"
Task data from the queue.
.ie n .IP "$path = $job\->tmp_dir" 4
.el .IP "\f(CW$path\fR = \f(CW$job\fR\->tmp_dir" 4
.IX Item "$path = $job->tmp_dir"
Temp dir created specifically for this job.
.ie n .IP "$bool = $job\->unsafe_inc" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->unsafe_inc" 4
.IX Item "$bool = $job->unsafe_inc"
True if '.' should be added to \f(CW@INC\fR.
.ie n .IP "$bool = $job\->use_fork" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->use_fork" 4
.IX Item "$bool = $job->use_fork"
True if this job should be launched via fork.
.ie n .IP "$bool = $job\->use_stream" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->use_stream" 4
.IX Item "$bool = $job->use_stream"
True if this job should use Test2::Formatter::Stream.
.ie n .IP "$bool = $job\->use_timeout" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->use_timeout" 4
.IX Item "$bool = $job->use_timeout"
True if this job should timeout due to lack of activity.
.ie n .IP "$bool = $job\->use_w_switch" 4
.el .IP "\f(CW$bool\fR = \f(CW$job\fR\->use_w_switch" 4
.IX Item "$bool = $job->use_w_switch"
True if the \f(CW\*(C`\-w\*(C'\fR switch should be used for this test.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
