.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::EventFacet::Assert 3"
.TH Test2::EventFacet::Assert 3 2023-11-30 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::EventFacet::Assert \- Facet representing an assertion.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The assertion facet is provided by any event representing an assertion that was
made.
.SH FIELDS
.IX Header "FIELDS"
.ie n .IP "$string = $assert\->{details}" 4
.el .IP "\f(CW$string\fR = \f(CW$assert\fR\->{details}" 4
.IX Item "$string = $assert->{details}"
.PD 0
.ie n .IP "$string = $assert\->\fBdetails()\fR" 4
.el .IP "\f(CW$string\fR = \f(CW$assert\fR\->\fBdetails()\fR" 4
.IX Item "$string = $assert->details()"
.PD
Human readable description of the assertion.
.ie n .IP "$bool = $assert\->{pass}" 4
.el .IP "\f(CW$bool\fR = \f(CW$assert\fR\->{pass}" 4
.IX Item "$bool = $assert->{pass}"
.PD 0
.ie n .IP "$bool = $assert\->\fBpass()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$assert\fR\->\fBpass()\fR" 4
.IX Item "$bool = $assert->pass()"
.PD
True if the assertion passed.
.ie n .IP "$bool = $assert\->{no_debug}" 4
.el .IP "\f(CW$bool\fR = \f(CW$assert\fR\->{no_debug}" 4
.IX Item "$bool = $assert->{no_debug}"
.PD 0
.ie n .IP "$bool = $assert\->\fBno_debug()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$assert\fR\->\fBno_debug()\fR" 4
.IX Item "$bool = $assert->no_debug()"
.PD
Set this to true if you have provided custom diagnostics and do not want the
defaults to be displayed.
.ie n .IP "$int = $assert\->{number}" 4
.el .IP "\f(CW$int\fR = \f(CW$assert\fR\->{number}" 4
.IX Item "$int = $assert->{number}"
.PD 0
.ie n .IP "$int = $assert\->\fBnumber()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$assert\fR\->\fBnumber()\fR" 4
.IX Item "$int = $assert->number()"
.PD
(Optional) assertion number. This may be omitted or ignored. This is usually
only useful when parsing/processing TAP.
.Sp
\&\fBNote\fR: This is not set by the Test2 system, assertion number is not known
until AFTER the assertion has been processed. This attribute is part of the
spec only for harnesses.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
