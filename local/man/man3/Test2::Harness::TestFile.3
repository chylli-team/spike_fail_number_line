.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::TestFile 3"
.TH Test2::Harness::TestFile 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::TestFile \- Abstraction of a test file and its meta\-data.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
When Test2::Harness finds test files to run each one gets an instance of this
class to represent it. This class will scan test files to find important meta
data (binary vs script, inline harness directives, etc). The meta-data this
class can find helps yath decide when and how to run the test.
.PP
If you write a custom Test2::Harness::Finder or use some
Test2::Harness::Plugin callbacks you may have to use, or even construct
instances of this class.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Harness::TestFile;
\&
\&    my $tf = Test2::Harness::TestFile\->new(file => "path/to/file.t");
\&
\&    # For an example 1, 1 works, but normally they are job_name and run_id.
\&    my $meta_data = $tf\->queue_item(1, 1);
.Ve
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.ie n .IP "$filename = $tf\->file" 4
.el .IP "\f(CW$filename\fR = \f(CW$tf\fR\->file" 4
.IX Item "$filename = $tf->file"
Set during object construction, and cannot be changed.
.ie n .IP "$bool = $tf\->is_binary" 4
.el .IP "\f(CW$bool\fR = \f(CW$tf\fR\->is_binary" 4
.IX Item "$bool = $tf->is_binary"
Automatically set during construction, cannot be changed or set manually.
.ie n .IP "$bool = $tf\->non_perl" 4
.el .IP "\f(CW$bool\fR = \f(CW$tf\fR\->non_perl" 4
.IX Item "$bool = $tf->non_perl"
Automatically set during construction, cannot be changed or set manually.
.ie n .IP "$string = $tf\->comment" 4
.el .IP "\f(CW$string\fR = \f(CW$tf\fR\->comment" 4
.IX Item "$string = $tf->comment"
.PD 0
.ie n .IP $tf\->set_comment($string) 4
.el .IP \f(CW$tf\fR\->set_comment($string) 4
.IX Item "$tf->set_comment($string)"
.PD
Defaults to '#' can be set during construction, or changed if needed.
.Sp
This is used to tell yath what character(s) are used to denote a comment. This
is necessary for finding harness directives. In perl the '#' character is used,
and that is the default value. This is here to support non-perl tests.
.ie n .IP "$class = $tf\->job_class" 4
.el .IP "\f(CW$class\fR = \f(CW$tf\fR\->job_class" 4
.IX Item "$class = $tf->job_class"
.PD 0
.ie n .IP $tf\->set_job_class($class) 4
.el .IP \f(CW$tf\fR\->set_job_class($class) 4
.IX Item "$tf->set_job_class($class)"
.PD
Default it undef (let the runner pick). You can change this if you want the
test to run with a custom job subclass.
.ie n .IP "$arrayref = $tf\->queue_args" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$tf\fR\->queue_args" 4
.IX Item "$arrayref = $tf->queue_args"
.PD 0
.ie n .IP $tf\->set_queue_args(\e@ARGS) 4
.el .IP \f(CW$tf\fR\->set_queue_args(\e@ARGS) 4
.IX Item "$tf->set_queue_args(@ARGS)"
.PD
Key/Value pairs to append to the \fBqueue_item()\fR data.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "$cat = $tf\->\fBcheck_category()\fR" 4
.el .IP "\f(CW$cat\fR = \f(CW$tf\fR\->\fBcheck_category()\fR" 4
.IX Item "$cat = $tf->check_category()"
.PD 0
.ie n .IP $tf\->set_category($cat) 4
.el .IP \f(CW$tf\fR\->set_category($cat) 4
.IX Item "$tf->set_category($cat)"
.PD
This is how you find the category for a file. You can use \f(CWset_category()\fR to
assign/override a category.
.ie n .IP "$dur = $tf\->\fBcheck_duration()\fR" 4
.el .IP "\f(CW$dur\fR = \f(CW$tf\fR\->\fBcheck_duration()\fR" 4
.IX Item "$dur = $tf->check_duration()"
.PD 0
.ie n .IP $tf\->set_duration($dur) 4
.el .IP \f(CW$tf\fR\->set_duration($dur) 4
.IX Item "$tf->set_duration($dur)"
.PD
Get the duration of the test file ('LONG', 'MEDIUM', 'SHORT'). You can override
with \f(CWset_duration()\fR.
.ie n .IP "$stage = $tf\->\fBcheck_stage()\fR" 4
.el .IP "\f(CW$stage\fR = \f(CW$tf\fR\->\fBcheck_stage()\fR" 4
.IX Item "$stage = $tf->check_stage()"
.PD 0
.ie n .IP $tf\->set_stage($stage) 4
.el .IP \f(CW$tf\fR\->set_stage($stage) 4
.IX Item "$tf->set_stage($stage)"
.PD
Get the preload stage the test file thinks it should be run in. You can
override with \f(CWset_stage()\fR.
.ie n .IP "$bool = $tf\->check_feature($name)" 4
.el .IP "\f(CW$bool\fR = \f(CW$tf\fR\->check_feature($name)" 4
.IX Item "$bool = $tf->check_feature($name)"
This checks for the \f(CW\*(C`# HARNESS\-NO\-NAME\*(C'\fR or \f(CW\*(C`# HARNESS\-USE\-NAME\*(C'\fR or
\&\f(CW\*(C`# HARNESS\-YES\-NAME\*(C'\fR directives. \f(CW\*(C`NO\*(C'\fR will result in a false boolean. \f(CW\*(C`YES\*(C'\fR
and \f(CW\*(C`USE\*(C'\fR will result in a ture boolean. If no directive is found then
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.ie n .IP "$arrayref = $tf\->\fBconflicts_list()\fR" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$tf\fR\->\fBconflicts_list()\fR" 4
.IX Item "$arrayref = $tf->conflicts_list()"
Get a list of conflict markers.
.ie n .IP "$seconds = $tf\->\fBevent_timeout()\fR" 4
.el .IP "\f(CW$seconds\fR = \f(CW$tf\fR\->\fBevent_timeout()\fR" 4
.IX Item "$seconds = $tf->event_timeout()"
If they test specifies an event timeout this will return it.
.ie n .IP "%headers = $tf\->\fBheaders()\fR" 4
.el .IP "\f(CW%headers\fR = \f(CW$tf\fR\->\fBheaders()\fR" 4
.IX Item "%headers = $tf->headers()"
This returns the header data from the test file.
.ie n .IP "$bool = $tf\->\fBis_executable()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$tf\fR\->\fBis_executable()\fR" 4
.IX Item "$bool = $tf->is_executable()"
Check if the test file is executable or not.
.ie n .IP "$data = $tf\->meta($key)" 4
.el .IP "\f(CW$data\fR = \f(CW$tf\fR\->meta($key)" 4
.IX Item "$data = $tf->meta($key)"
Get the meta-data for the specific key.
.ie n .IP "$seconds = $tf\->\fBpost_exit_timeout()\fR" 4
.el .IP "\f(CW$seconds\fR = \f(CW$tf\fR\->\fBpost_exit_timeout()\fR" 4
.IX Item "$seconds = $tf->post_exit_timeout()"
If the test file has a custom post-exit timeout, this will return it.
.ie n .IP "$hashref = $tf\->queue_item($job_name, $run_id)" 4
.el .IP "\f(CW$hashref\fR = \f(CW$tf\fR\->queue_item($job_name, \f(CW$run_id\fR)" 4
.IX Item "$hashref = $tf->queue_item($job_name, $run_id)"
This returns the data used to add the test file to the runner queue.
.ie n .IP "$int = $tf\->\fBrank()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$tf\fR\->\fBrank()\fR" 4
.IX Item "$int = $tf->rank()"
Returns an integer value used to sort tests into an efficient run order.
.ie n .IP "$path = $tf\->\fBrelative()\fR" 4
.el .IP "\f(CW$path\fR = \f(CW$tf\fR\->\fBrelative()\fR" 4
.IX Item "$path = $tf->relative()"
Relative path to the test file.
.ie n .IP $tf\->\fBscan()\fR 4
.el .IP \f(CW$tf\fR\->\fBscan()\fR 4
.IX Item "$tf->scan()"
Scan the file and populate the header data. Return nothing, takes no arguments.
Automatically run by things that require the scan data. Results are cached.
.ie n .IP $tf\->set_smoke($bool) 4
.el .IP \f(CW$tf\fR\->set_smoke($bool) 4
.IX Item "$tf->set_smoke($bool)"
Set smoke status. Smoke tests go to the front of the line when tests are
sorted.
.ie n .IP "$hashref = $tf\->\fBshbang()\fR" 4
.el .IP "\f(CW$hashref\fR = \f(CW$tf\fR\->\fBshbang()\fR" 4
.IX Item "$hashref = $tf->shbang()"
Get data gathered from parsing the tests shbang line.
.ie n .IP "$arrayref = $tf\->\fBswitches()\fR" 4
.el .IP "\f(CW$arrayref\fR = \f(CW$tf\fR\->\fBswitches()\fR" 4
.IX Item "$arrayref = $tf->switches()"
A list of switches passed to perl, usually from the shbang line.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
