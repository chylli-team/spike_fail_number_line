.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Tools::HarnessTester 3"
.TH Test2::Tools::HarnessTester 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Tools::HarnessTester \- Run events through a harness for a summary
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This tool allows you to process events through the Test2::Harness auditor.
The main benefit here is to get a pass/fail result, as well as counts for
assertions, failures, and errors.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    use Test2::V0;
\&    use Test2::API qw/intercept/;
\&    use Test2::Tools::HarnessTester qw/summarize_events/;
\&
\&    my $events = intercept {
\&        ok(1, "pass");
\&        ok(2, "pass gain");
\&        done_testing;
\&    };
\&
\&    is(
\&        summarize_events($events),
\&        {
\&            # Each of these is the negation of the other, no need to check both
\&            pass       => 1,
\&            fail       => 0,
\&
\&            # The plan facet, see Test2::EventFacet::Plan
\&            plan       => {count => 2},
\&
\&            # Statistics
\&            assertions => 2,
\&            errors     => 0,
\&            failures   => 0,
\&        }
\&    );
.Ve
.SH EXPORTS
.IX Header "EXPORTS"
.ie n .SS "$summary = summarize_events($events)"
.el .SS "\f(CW$summary\fP = summarize_events($events)"
.IX Subsection "$summary = summarize_events($events)"
This takes an arrayref of events, such as that produced by \f(CW\*(C`intercept {...}\*(C'\fR
from Test2::API. The result is a hashref that summarizes the results of the
events as processed by Test2::Harness, specifically the
Test2::Harness::Auditor::Watcher module.
.PP
Fields in the summary hash:
.ie n .IP "pass => $BOOL" 4
.el .IP "pass => \f(CW$BOOL\fR" 4
.IX Item "pass => $BOOL"
.PD 0
.ie n .IP "fail => $BOOL" 4
.el .IP "fail => \f(CW$BOOL\fR" 4
.IX Item "fail => $BOOL"
.PD
These are negatives of eachother. These represent the pass/fail state after
processing the events. When one is true the other should be false. These are
normalized to \f(CW1\fR and \f(CW0\fR.
.ie n .IP "plan => $HASHREF" 4
.el .IP "plan => \f(CW$HASHREF\fR" 4
.IX Item "plan => $HASHREF"
If a plan was provided this will have the Test2::EventFacet::Plan facet, but
as a hashref, not a blessed instance.
.Sp
\&\fBNote:\fR This is reference to the original data, not a copy, if you modify it
you will modify the event as well.
.ie n .IP "assertions => $INT" 4
.el .IP "assertions => \f(CW$INT\fR" 4
.IX Item "assertions => $INT"
Count of assertions made.
.ie n .IP "errors => $INT" 4
.el .IP "errors => \f(CW$INT\fR" 4
.IX Item "errors => $INT"
Count of errors seen.
.ie n .IP "failures => $INT" 4
.el .IP "failures => \f(CW$INT\fR" 4
.IX Item "failures => $INT"
Count of failures seen.
.ie n .SS "$path = \fBmake_example_dir()\fP"
.el .SS "\f(CW$path\fP = \fBmake_example_dir()\fP"
.IX Subsection "$path = make_example_dir()"
This will create a temporary directory with 't', 't2', and 'xt' subdirectories
each of which will contain a single passing test.
.PP
This is re-exported from App::Yath::Tester.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
