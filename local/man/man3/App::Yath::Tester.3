.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::Yath::Tester 3"
.TH App::Yath::Tester 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
App::Yath::Tester \- Tools for testing yath
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This package provides utilities for running yath from within tests to verify
its behavior. This is primarily used for integration testing of yath and for
third party components.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use App::Yath::Tester qw/yath/;
\&
\&    my $result = yath(
\&        # Command and arguments
\&        command => \*(Aqtest\*(Aq,
\&        args    => [\*(Aq\-pMyPlugin\*(Aq, \*(Aqpath/to/test\*(Aq, ...],
\&
\&        # Exit code we expect from yath
\&        exit => 0,
\&
\&        # Subtest to verify results
\&        test => sub {
\&            my $result = shift;
\&
\&            # Redundant since we have the exit check above
\&            is($result\->{exit}, 0, "Verify exit");
\&
\&            is($result\->{output}, $expected_output, "Got the expected output from yath");
\&        },
\&    );
.Ve
.SH EXPORTS
.IX Header "EXPORTS"
There are 2 exports from this module.
.ie n .SS "$result = yath(...)"
.el .SS "\f(CW$result\fP = yath(...)"
.IX Subsection "$result = yath(...)"
.Vb 4
\&    my $result = yath(
\&        # Command and arguments
\&        command => \*(Aqtest\*(Aq,
\&        args    => [\*(Aq\-pMyPlugin\*(Aq, \*(Aqpath/to/test\*(Aq, ...],
\&
\&        # Exit code we expect from yath
\&        exit => 0,
\&
\&        # Subtest to verify results
\&        test => sub {
\&            my $result = shift;
\&
\&            # Redundant since we have the exit check above
\&            is($result\->{exit}, 0, "Verify exit");
\&
\&            is($result\->{output}, $expected_output, "Got the expected output from yath");
\&        },
\&    );
.Ve
.PP
\fIARGUMENTS\fR
.IX Subsection "ARGUMENTS"
.ie n .IP "cmd => $command" 4
.el .IP "cmd => \f(CW$command\fR" 4
.IX Item "cmd => $command"
.PD 0
.ie n .IP "command => $command" 4
.el .IP "command => \f(CW$command\fR" 4
.IX Item "command => $command"
.PD
Either 'cmd' or 'command' can be used. This argument takes a string that should
be a command name.
.IP "cli => \e@ARGS" 4
.IX Item "cli => @ARGS"
.PD 0
.IP "args => \e@ARGS" 4
.IX Item "args => @ARGS"
.PD
Either 'cli' or 'args' can be used. If none are provided an empty arrayref is
used. This argument takes an arrayref of arguments to the yath command.
.Sp
.Vb 1
\&    $ yath [PRE_COMMAND] [COMMAND] [ARGS]
.Ve
.IP "pre => \e@ARGS" 4
.IX Item "pre => @ARGS"
.PD 0
.IP "pre_command => \e@ARGS" 4
.IX Item "pre_command => @ARGS"
.PD
Either 'pre' or 'pre_command' can be used. An empty arrayref is used if none
are provided. These are arguments provided to yath BEFORE the command on the
command line.
.Sp
.Vb 1
\&    $ yath [PRE_COMMAND] [COMMAND] [ARGS]
.Ve
.IP "env => \e%ENV" 4
.IX Item "env => %ENV"
Provide custom environment variable values to set before running the yath
command.
.ie n .IP "encoding => $encoding_name" 4
.el .IP "encoding => \f(CW$encoding_name\fR" 4
.IX Item "encoding => $encoding_name"
If you expect your yath command's output to be in a specific encoding you can
specify it here to make sure the \f(CW\*(C`$result\->{output}\*(C'\fR text has been read
properly.
.IP "test => sub { ... }" 4
.IX Item "test => sub { ... }"
.PD 0
.IP "tests => sub { ... }" 4
.IX Item "tests => sub { ... }"
.IP "subtest => sub { ... }" 4
.IX Item "subtest => sub { ... }"
.PD
These 3 arguments are all aliases for the same thing, only one should be used.
The codeblock will be called with \f(CW$result\fR as the onyl argument. The
codeblock will be run as a subtest. If you specify the \f(CW\*(Aqexit\*(Aq\fR argument that
check will also happen in the same subtest.
.Sp
.Vb 2
\&    test => sub {
\&        my $result = shift;
\&
\&        ... verify result ...
\&    },
.Ve
.ie n .IP "exit => $integer" 4
.el .IP "exit => \f(CW$integer\fR" 4
.IX Item "exit => $integer"
Verify that the yath command exited with the specified exit code. This check
will be run in a subtest. If you specify a custom subtest then this check will
appear to come from that subtest.
.ie n .IP "debug => $integer" 4
.el .IP "debug => \f(CW$integer\fR" 4
.IX Item "debug => $integer"
Output debug info in realtime, depending on the \f(CW$integer\fR value this may include
the output from the yath command being run.
.Sp
.Vb 3
\&    0 \- No debugging
\&    1 \- Output the command and other action being taken by the tool
\&    2 \- Echo yath output as it happens
.Ve
.ie n .IP "inc => $bool" 4
.el .IP "inc => \f(CW$bool\fR" 4
.IX Item "inc => $bool"
This defaults to true.
.Sp
When true the tool will look for a directory next to your test file with an
identical name except that '.t' or '.t2' will be stripped from it. If that
directory exists it will be added as a dev-lib to the yath command.
.Sp
If your test file is 't/foo/bar.t' then your yath command will look like this:
.Sp
.Vb 1
\&    $ yath \-D=t/foo/bar [PRE\-COMMAND] [COMMAND] [ARGS]
.Ve
.ie n .IP "capture => $bool" 4
.el .IP "capture => \f(CW$bool\fR" 4
.IX Item "capture => $bool"
Defaults to true.
.Sp
When true the yath output will be captured and put into
\&\f(CW\*(C`$result\->{output}\*(C'\fR.
.ie n .IP "log => $bool" 4
.el .IP "log => \f(CW$bool\fR" 4
.IX Item "log => $bool"
Defaults to false.
.Sp
When true yath will be instructed to produce a log, the log will be accessible
via \f(CW\*(C`$result\->{log}\*(C'\fR. \f(CW\*(C`$result\->{log}\*(C'\fR will be an instance of
Test2::Harness::Util::File::JSONL.
.ie n .IP "no_app_path => $bool" 4
.el .IP "no_app_path => \f(CW$bool\fR" 4
.IX Item "no_app_path => $bool"
Default to false.
.Sp
Normally \f(CW\*(C`\-D=/path/to/lib\*(C'\fR is added to the yath command where
\&\f(CW\*(Aq/path/to/lib\*(Aq\fR is the path the the lib dir App::Yath was loaded from.
This normally insures the correct version of yath libraries is loaded.
.Sp
When this argument is set to true the path is not added.
.IP "lib => [...]" 4
.IX Item "lib => [...]"
This poorly named argument allows you to inject command line argumentes between
\&\f(CW\*(C`perl\*(C'\fR and \f(CW\*(C`yath\*(C'\fR in the command.
.Sp
.Vb 1
\&    perl [LIB] path/to/yath [PRE\-COMMAND] [COMMAND] [ARGS]
.Ve
.PP
\fIRESULT\fR
.IX Subsection "RESULT"
.PP
The result hashref may containt he following fields depending on the arguments
passed into \f(CWyath()\fR.
.ie n .IP "exit => $integer" 4
.el .IP "exit => \f(CW$integer\fR" 4
.IX Item "exit => $integer"
Exit value returned from yath.
.ie n .IP "output => $string" 4
.el .IP "output => \f(CW$string\fR" 4
.IX Item "output => $string"
The output produced by the yath command.
.ie n .IP "log => $jsonl_object" 4
.el .IP "log => \f(CW$jsonl_object\fR" 4
.IX Item "log => $jsonl_object"
An instance of Test2::Harness::Util::File::JSONL opened from the log file
produced by the yath command.
.Sp
\&\fBNote:\fR By default no logging is done, you must specify the \f(CW\*(C`log => 1\*(C'\fR
argument to enable it.
.ie n .SS "$path = \fBmake_example_dir()\fP"
.el .SS "\f(CW$path\fP = \fBmake_example_dir()\fP"
.IX Subsection "$path = make_example_dir()"
This will create a temporary directory with 't', 't2', and 'xt' subdirectories
each of which will contain a single passing test.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
