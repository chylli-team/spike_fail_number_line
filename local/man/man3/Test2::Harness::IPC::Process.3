.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::IPC::Process 3"
.TH Test2::Harness::IPC::Process 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::IPC::Process \- Base class for processes controlled by
Test2::Harness::IPC.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
All processes controlled by Test2::Harness::IPC should subclass this one.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.ie n .IP "$int = $proc\->exit" 4
.el .IP "\f(CW$int\fR = \f(CW$proc\fR\->exit" 4
.IX Item "$int = $proc->exit"
Exit value, if set. Otherwise \f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$stamp = $proc\->exit_time" 4
.el .IP "\f(CW$stamp\fR = \f(CW$proc\fR\->exit_time" 4
.IX Item "$stamp = $proc->exit_time"
Timestamp of the process exit, if set, otherwise \f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$pid = $proc\->pid" 4
.el .IP "\f(CW$pid\fR = \f(CW$proc\fR\->pid" 4
.IX Item "$pid = $proc->pid"
Pid of the process, if it has been started.
.ie n .IP "$cat = $proc\->category" 4
.el .IP "\f(CW$cat\fR = \f(CW$proc\fR\->category" 4
.IX Item "$cat = $proc->category"
Set at construction, \f(CW\*(Aqdefault\*(Aq\fR if not provided.
.SH METHODS
.IX Header "METHODS"
.ie n .IP $opt\->set_pid($pid) 4
.el .IP \f(CW$opt\fR\->set_pid($pid) 4
.IX Item "$opt->set_pid($pid)"
Set the process id.
.ie n .IP "$opt\->set_exit($ipc, $exit, $time)" 4
.el .IP "\f(CW$opt\fR\->set_exit($ipc, \f(CW$exit\fR, \f(CW$time\fR)" 4
.IX Item "$opt->set_exit($ipc, $exit, $time)"
Set the process as complete. \f(CW$exit\fR should be the exit value. \f(CW$time\fR should be a
timestamp. \f(CW$ipc\fR is an instance of Test2::Harness::IPC.
.ie n .IP "$hashref = $opt\->\fBspawn_params()\fR" 4
.el .IP "\f(CW$hashref\fR = \f(CW$opt\fR\->\fBspawn_params()\fR" 4
.IX Item "$hashref = $opt->spawn_params()"
Used when spawning the process, args go to \f(CWrun_cmd()\fR from
Test2::Harness::Util::IPC.
.Sp
The base class throws an exception if this method is called.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
