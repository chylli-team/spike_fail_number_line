.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Runner 3"
.TH Test2::Harness::Runner 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Runner \- Base class for test runners
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module does the heavy lifting of running all the tests.
.PP
You should never need to create an instance of the runner yourself. In most
cases the runner module is exposed via a callback or a plugin affordance.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "FROM SETTINGS"
.IX Subsection "FROM SETTINGS"
These are attributesd with values set from the Test2::Harness::Settings
instance created from command line arguments.
.PP
See App::Yath::Options::Runner for the most up to date documentation on
these.
.ie n .IP $runner\->includes 4
.el .IP \f(CW$runner\fR\->includes 4
.IX Item "$runner->includes"
.PD 0
.ie n .IP $runner\->tlib 4
.el .IP \f(CW$runner\fR\->tlib 4
.IX Item "$runner->tlib"
.ie n .IP $runner\->lib 4
.el .IP \f(CW$runner\fR\->lib 4
.IX Item "$runner->lib"
.ie n .IP $runner\->blib 4
.el .IP \f(CW$runner\fR\->blib 4
.IX Item "$runner->blib"
.ie n .IP $runner\->unsafe_inc 4
.el .IP \f(CW$runner\fR\->unsafe_inc 4
.IX Item "$runner->unsafe_inc"
.ie n .IP $runner\->use_fork 4
.el .IP \f(CW$runner\fR\->use_fork 4
.IX Item "$runner->use_fork"
.ie n .IP $runner\->preloads 4
.el .IP \f(CW$runner\fR\->preloads 4
.IX Item "$runner->preloads"
.ie n .IP $runner\->preload_threshold 4
.el .IP \f(CW$runner\fR\->preload_threshold 4
.IX Item "$runner->preload_threshold"
.ie n .IP $runner\->switches 4
.el .IP \f(CW$runner\fR\->switches 4
.IX Item "$runner->switches"
.ie n .IP $runner\->cover 4
.el .IP \f(CW$runner\fR\->cover 4
.IX Item "$runner->cover"
.ie n .IP $runner\->event_timeout 4
.el .IP \f(CW$runner\fR\->event_timeout 4
.IX Item "$runner->event_timeout"
.ie n .IP $runner\->post_exit_timeout 4
.el .IP \f(CW$runner\fR\->post_exit_timeout 4
.IX Item "$runner->post_exit_timeout"
.PD
.SS "FROM CONSTRUCTION"
.IX Subsection "FROM CONSTRUCTION"
These attributes are set when the runner is created.
.ie n .IP "$path = $runner\->dir" 4
.el .IP "\f(CW$path\fR = \f(CW$runner\fR\->dir" 4
.IX Item "$path = $runner->dir"
Path to the working directory.
.ie n .IP "$settings = $runner\->settings" 4
.el .IP "\f(CW$settings\fR = \f(CW$runner\fR\->settings" 4
.IX Item "$settings = $runner->settings"
The App::Yath::Settings instance.
.ie n .IP "$coderef = $runner\->fork_job_callback" 4
.el .IP "\f(CW$coderef\fR = \f(CW$runner\fR\->fork_job_callback" 4
.IX Item "$coderef = $runner->fork_job_callback"
Callback used to spawn new tests via fork.
.ie n .IP "$coderef = $runner\->respawn_runner_callback" 4
.el .IP "\f(CW$coderef\fR = \f(CW$runner\fR\->respawn_runner_callback" 4
.IX Item "$coderef = $runner->respawn_runner_callback"
Callback to restart the runner process.
.ie n .IP "$bool = $runner\->monitor_preloads" 4
.el .IP "\f(CW$bool\fR = \f(CW$runner\fR\->monitor_preloads" 4
.IX Item "$bool = $runner->monitor_preloads"
True if preloads should be watched for changes.
.ie n .IP "$int = $runner\->jobs_todo" 4
.el .IP "\f(CW$int\fR = \f(CW$runner\fR\->jobs_todo" 4
.IX Item "$int = $runner->jobs_todo"
A count of total jobs to run. This will always be 0 in a persistent runner.
.SS "OTHER PUBLIC METHODS"
.IX Subsection "OTHER PUBLIC METHODS"
If a method is not documented here then it is an implementation detail and you
should not use it.
.ie n .IP "$class = $runner\->job_class" 4
.el .IP "\f(CW$class\fR = \f(CW$runner\fR\->job_class" 4
.IX Item "$class = $runner->job_class"
Class for new test jobs.
.ie n .IP "$preload = $runner\->preloader" 4
.el .IP "\f(CW$preload\fR = \f(CW$runner\fR\->preloader" 4
.IX Item "$preload = $runner->preloader"
Get the Test2::Harness::Runner::Preloader instance.
.ie n .IP "$state = $runner\->state" 4
.el .IP "\f(CW$state\fR = \f(CW$runner\fR\->state" 4
.IX Item "$state = $runner->state"
Get the Test2::Harness::Runner::State instance.
.ie n .IP "@list = $runner\->all_libs" 4
.el .IP "\f(CW@list\fR = \f(CW$runner\fR\->all_libs" 4
.IX Item "@list = $runner->all_libs"
Get all the libs that should be added to \f(CW@INC\fR by default. Note that specific
runs and even specific tests can have custom paths on top of these.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
