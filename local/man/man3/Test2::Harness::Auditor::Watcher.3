.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test2::Harness::Auditor::Watcher 3"
.TH Test2::Harness::Auditor::Watcher 3 2023-10-03 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test2::Harness::Auditor::Watcher \- Class to monitor events for a single job and
pass judgement on the result.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module represents a per-job state tracker. This module sees every event
and manages the state produced. In the end this tracker determines if a test
job passed or failed, and why.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Harness::Auditor::Watcher;
\&
\&    my $watcher = Test2::Harness::Auditor::Watcher\->new();
\&
\&    for my $event (@events) {
\&        $watcher\->process($event);
\&    }
\&
\&    print "Pass!" if $watcher\->pass;
\&    print "Fail!" if $watcher\->fail;
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .IP "$int = $watcher\->\fBassertion_count()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$watcher\fR\->\fBassertion_count()\fR" 4
.IX Item "$int = $watcher->assertion_count()"
Number of assertions that have been seen.
.ie n .IP "$exit = $watcher\->\fBexit()\fR" 4
.el .IP "\f(CW$exit\fR = \f(CW$watcher\fR\->\fBexit()\fR" 4
.IX Item "$exit = $watcher->exit()"
If the job has exited this will return the exit value (integer, 0 or greater).
If the job has not exited yet (or at least if the watcher has not seen the exit
event yet) this will return undef.
.ie n .IP "$bool = $watcher\->\fBfail()\fR" 4
.el .IP "\f(CW$bool\fR = \f(CW$watcher\fR\->\fBfail()\fR" 4
.IX Item "$bool = $watcher->fail()"
Returns true if the job has failed/is failing.
.ie n .IP "@error_facets = $watcher\->fail_error_facet_list" 4
.el .IP "\f(CW@error_facets\fR = \f(CW$watcher\fR\->fail_error_facet_list" 4
.IX Item "@error_facets = $watcher->fail_error_facet_list"
Used internally to get a list of 'error' facets to inject into the
harness_job_exit event.
.ie n .IP "$file = $watcher\->file" 4
.el .IP "\f(CW$file\fR = \f(CW$watcher\fR\->file" 4
.IX Item "$file = $watcher->file"
If the test file is known this will return it (string). This will return undef
if the file is not yet known.
.ie n .IP "$string = $watcher\->halt" 4
.el .IP "\f(CW$string\fR = \f(CW$watcher\fR\->halt" 4
.IX Item "$string = $watcher->halt"
If the test was halted (bail-out) this will contain the human readible reason.
.ie n .IP "$bool = $watcher\->has_exit" 4
.el .IP "\f(CW$bool\fR = \f(CW$watcher\fR\->has_exit" 4
.IX Item "$bool = $watcher->has_exit"
Check if the exit value is known.
.ie n .IP "$bool = $watcher\->has_plan" 4
.el .IP "\f(CW$bool\fR = \f(CW$watcher\fR\->has_plan" 4
.IX Item "$bool = $watcher->has_plan"
Check if a plan has been seen.
.ie n .IP "$job = $watcher\->job" 4
.el .IP "\f(CW$job\fR = \f(CW$watcher\fR\->job" 4
.IX Item "$job = $watcher->job"
If the job is known this will return the detailed structure of the job.
.ie n .IP "$int = $watcher\->nested" 4
.el .IP "\f(CW$int\fR = \f(CW$watcher\fR\->nested" 4
.IX Item "$int = $watcher->nested"
If this watcher represents a subtest this will be an integer greater than 0,
the top-level test is 0.
.ie n .IP "$hash = $watcher\->numbers" 4
.el .IP "\f(CW$hash\fR = \f(CW$watcher\fR\->numbers" 4
.IX Item "$hash = $watcher->numbers"
This is an internal state tracking what test numbers have been seen. This is
really only applicable in tests that produced TAP.
.ie n .IP "$bool = $watcher\->pass" 4
.el .IP "\f(CW$bool\fR = \f(CW$watcher\fR\->pass" 4
.IX Item "$bool = $watcher->pass"
Check if the test job is passing.
.ie n .IP "$plan_facet = $watcher\->\fBplan()\fR" 4
.el .IP "\f(CW$plan_facet\fR = \f(CW$watcher\fR\->\fBplan()\fR" 4
.IX Item "$plan_facet = $watcher->plan()"
If the plan facet has been seen this will return it.
.ie n .IP $watcher\->process($event); 4
.el .IP \f(CW$watcher\fR\->process($event); 4
.IX Item "$watcher->process($event);"
Modify the state based on the provided event.
.ie n .IP $watcher\->subtest_fail_error_facet_list 4
.el .IP \f(CW$watcher\fR\->subtest_fail_error_facet_list 4
.IX Item "$watcher->subtest_fail_error_facet_list"
Used internally to get a list of 'error' facets to inject into the
harness_job_exit event.
.ie n .IP "$times = $watcher\->\fBtimes()\fR" 4
.el .IP "\f(CW$times\fR = \f(CW$watcher\fR\->\fBtimes()\fR" 4
.IX Item "$times = $watcher->times()"
Retuns the Test2::Harness::Auditor::TimeTracker instance.
.ie n .IP "$int = $watcher\->\fBtry()\fR" 4
.el .IP "\f(CW$int\fR = \f(CW$watcher\fR\->\fBtry()\fR" 4
.IX Item "$int = $watcher->try()"
Sometimes a job is run more than once, in those cases this will be an integer
greater than 0 representing the try. 0 is used for the first try.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Test2\-Harness can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Harness/\fR.
.SH MAINTAINERS
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH AUTHORS
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020 Chad Granum <exodist7@gmail.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
